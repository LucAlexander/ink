constant AF_INET = 2;
constant SOCK_STREAM = 1;
constant INADDR_ANY = 0;

external {
	import "netinet_wrapper.h"
	alias __u_char = u8;
	alias __u_short = u16;
	alias __u_int = u32;
	alias __u_long = u64;
	alias __int8_t = i8;
	alias __uint8_t = u8;
	alias __int16_t = i16;
	alias __uint16_t = u16;
	alias __int32_t = i32;
	alias __uint32_t = u32;
	alias __int64_t = i64;
	alias __uint64_t = u64;
	alias __int_least8_t = __int8_t;
	alias __uint_least8_t = __uint8_t;
	alias __int_least16_t = __int16_t;
	alias __uint_least16_t = __uint16_t;
	alias __int_least32_t = __int32_t;
	alias __uint_least32_t = __uint32_t;
	alias __int_least64_t = __int64_t;
	alias __uint_least64_t = __uint64_t;
	alias __quad_t = i64;
	alias __u_quad_t = u64;
	alias __intmax_t = i64;
	alias __uintmax_t = u64;
	alias __dev_t = u64;
	alias __uid_t = u32;
	alias __gid_t = u32;
	alias __ino_t = u64;
	alias __ino64_t = u64;
	alias __mode_t = u32;
	alias __nlink_t = u64;
	alias __off_t = i64;
	alias __off64_t = i64;
	alias __pid_t = i32;
	type __fsid_t = struct {(i32)^ __val;};
	alias __clock_t = i64;
	alias __rlim_t = u64;
	alias __rlim64_t = u64;
	alias __id_t = u32;
	alias __time_t = i64;
	alias __useconds_t = u32;
	alias __suseconds_t = i64;
	alias __suseconds64_t = i64;
	alias __daddr_t = i32;
	alias __key_t = i32;
	alias __clockid_t = i32;
	alias __timer_t = (u8)^;
	alias __blksize_t = i64;
	alias __blkcnt_t = i64;
	alias __blkcnt64_t = i64;
	alias __fsblkcnt_t = u64;
	alias __fsblkcnt64_t = u64;
	alias __fsfilcnt_t = u64;
	alias __fsfilcnt64_t = u64;
	alias __fsword_t = i64;
	alias __ssize_t = i64;
	alias __syscall_slong_t = i64;
	alias __syscall_ulong_t = u64;
	alias __loff_t = __off64_t;
	alias __caddr_t = (i8)^;
	alias __intptr_t = i64;
	alias __socklen_t = u32;
	alias __sig_atomic_t = i32;
	alias uint8_t = __uint8_t;
	alias uint16_t = __uint16_t;
	alias uint32_t = __uint32_t;
	alias uint64_t = __uint64_t;
	alias size_t = u64;
	alias u_char = __u_char;
	alias u_short = __u_short;
	alias u_int = __u_int;
	alias u_long = __u_long;
	alias quad_t = __quad_t;
	alias u_quad_t = __u_quad_t;
	alias fsid_t = __fsid_t;
	alias loff_t = __loff_t;
	alias ino_t = __ino_t;
	alias dev_t = __dev_t;
	alias gid_t = __gid_t;
	alias mode_t = __mode_t;
	alias nlink_t = __nlink_t;
	alias uid_t = __uid_t;
	alias off_t = __off_t;
	alias pid_t = __pid_t;
	alias id_t = __id_t;
	alias ssize_t = __ssize_t;
	alias daddr_t = __daddr_t;
	alias caddr_t = __caddr_t;
	alias key_t = __key_t;
	alias clock_t = __clock_t;
	alias clockid_t = __clockid_t;
	alias time_t = __time_t;
	alias timer_t = __timer_t;
	alias ulong = u64;
	alias ushort = u16;
	alias uint = u32;
	alias int8_t = __int8_t;
	alias int16_t = __int16_t;
	alias int32_t = __int32_t;
	alias int64_t = __int64_t;
	alias u_int8_t = __uint8_t;
	alias u_int16_t = __uint16_t;
	alias u_int32_t = __uint32_t;
	alias u_int64_t = __uint64_t;
	alias register_t = i32;
	type __sigset_t = struct {(u64)^ __val;};
	alias sigset_t = __sigset_t;
	alias suseconds_t = __suseconds_t;
	alias __fd_mask = i64;
	type fd_set = struct {(__fd_mask)^ __fds_bits;};
	alias fd_mask = __fd_mask;
	i32 -> (fd_set)^ -> (fd_set)^ -> (fd_set)^ -> (u8)^ -> i32 select;
	i32 -> (fd_set)^ -> (fd_set)^ -> (fd_set)^ -> (u8)^ -> (__sigset_t)^ -> i32 pselect;
	alias blksize_t = __blksize_t;
	alias blkcnt_t = __blkcnt_t;
	alias fsblkcnt_t = __fsblkcnt_t;
	alias fsfilcnt_t = __fsfilcnt_t;
	type __atomic_wide_counter = union {u64 __value64;struct {u32 __low;u32 __high;} __value32;};
	type __pthread_list_t = struct {u8^ empty;};
	type __pthread_slist_t = struct {u8^ empty;};
	alias __tss_t = u32;
	alias __thrd_t = u64;
	type __once_flag = struct {i32 __data;};
	alias pthread_t = u64;
	type pthread_mutexattr_t = union {(i8)^ __size;i32 __align;};
	type pthread_condattr_t = union {(i8)^ __size;i32 __align;};
	alias pthread_key_t = u32;
	alias pthread_once_t = i32;
	type pthread_attr_t = union {u8^ empty;};
	type pthread_mutex_t = union {struct {u8^ empty;} __data;(i8)^ __size;i64 __align;};
	type pthread_cond_t = union {struct {u8^ empty;} __data;(i8)^ __size;i64 __align;};
	type pthread_rwlock_t = union {struct {u8^ empty;} __data;(i8)^ __size;i64 __align;};
	type pthread_rwlockattr_t = union {(i8)^ __size;i64 __align;};
	alias pthread_spinlock_t = i32;
	type pthread_barrier_t = union {(i8)^ __size;i64 __align;};
	type pthread_barrierattr_t = union {(i8)^ __size;i32 __align;};
	alias socklen_t = __socklen_t;
	alias sa_family_t = u16;
	(u8)^ -> (u8)^ -> (u8)^ __cmsg_nxthdr;
	type __kernel_fd_set = struct {(u64)^ fds_bits;};
	alias __kernel_sighandler_t = [u8];
	alias __kernel_key_t = i32;
	alias __kernel_mqd_t = i32;
	alias __kernel_old_uid_t = u16;
	alias __kernel_old_gid_t = u16;
	alias __kernel_old_dev_t = u64;
	alias __kernel_long_t = i64;
	alias __kernel_ulong_t = u64;
	alias __kernel_ino_t = __kernel_ulong_t;
	alias __kernel_mode_t = u32;
	alias __kernel_pid_t = i32;
	alias __kernel_ipc_pid_t = i32;
	alias __kernel_uid_t = u32;
	alias __kernel_gid_t = u32;
	alias __kernel_suseconds_t = __kernel_long_t;
	alias __kernel_daddr_t = i32;
	alias __kernel_uid32_t = u32;
	alias __kernel_gid32_t = u32;
	alias __kernel_size_t = __kernel_ulong_t;
	alias __kernel_ssize_t = __kernel_long_t;
	alias __kernel_ptrdiff_t = __kernel_long_t;
	type __kernel_fsid_t = struct {(i32)^ val;};
	alias __kernel_off_t = __kernel_long_t;
	alias __kernel_loff_t = i64;
	alias __kernel_old_time_t = __kernel_long_t;
	alias __kernel_time_t = __kernel_long_t;
	alias __kernel_time64_t = i64;
	alias __kernel_clock_t = __kernel_long_t;
	alias __kernel_timer_t = i32;
	alias __kernel_clockid_t = i32;
	alias __kernel_caddr_t = (i8)^;
	alias __kernel_uid16_t = u16;
	alias __kernel_gid16_t = u16;
	i32 -> i32 -> i32 -> i32 socket;
	i32 -> i32 -> i32 -> (i32)^ -> i32 socketpair;
	i32 -> (u8)^ -> socklen_t -> i32 bind;
	i32 -> (u8)^ -> (socklen_t)^ -> i32 getsockname;
	i32 -> (u8)^ -> socklen_t -> i32 connect;
	i32 -> (u8)^ -> (socklen_t)^ -> i32 getpeername;
	i32 -> (u8)^ -> size_t -> i32 -> ssize_t send;
	i32 -> (u8)^ -> size_t -> i32 -> ssize_t recv;
	i32 -> (u8)^ -> size_t -> i32 -> (u8)^ -> socklen_t -> ssize_t sendto;
	i32 -> (u8)^ -> size_t -> i32 -> (u8)^ -> (socklen_t)^ -> ssize_t recvfrom;
	i32 -> (u8)^ -> i32 -> ssize_t sendmsg;
	i32 -> (u8)^ -> i32 -> ssize_t recvmsg;
	i32 -> i32 -> i32 -> (u8)^ -> (socklen_t)^ -> i32 getsockopt;
	i32 -> i32 -> i32 -> (u8)^ -> socklen_t -> i32 setsockopt;
	i32 -> i32 -> i32 listen;
	i32 -> (u8)^ -> (socklen_t)^ -> i32 accept;
	i32 -> i32 -> i32 shutdown;
	i32 -> i32 sockatmark;
	i32 -> i32 -> i32 isfdtype;
	alias in_addr_t = uint32_t;
	alias in_port_t = uint16_t;
	uint32_t -> uint32_t ntohl;
	uint16_t -> uint16_t ntohs;
	uint32_t -> uint32_t htonl;
	uint16_t -> uint16_t htons;
	i32 -> (u8)^ -> i32 bindresvport;
	i32 -> (u8)^ -> i32 bindresvport6;
	type sockaddr_in = struct {
		sa_family_t var sin_family;
		in_port_t var sin_port;
		struct {in_addr_t var s_addr;} var sin_addr;
		u64 var sin_zero;
	};
}

type sockaddr_in_ink = struct {
	sa_family_t var sin_family;
	in_port_t var sin_port;
	struct {in_addr_t var s_addr;} var sin_addr;
	u64 var sin_zero;
};


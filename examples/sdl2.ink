
constant SDL_INIT_VIDEO = 32;
constant SDL_WINDOWPOS_UNDEFINED = 536805376;
constant SDL_WINDOW_SHOWN = 4;
constant SDL_INIT_EVERYTHING = 62001;

external {
	import global "SDL2/SDL.h"
	(i8)^ SDL_GetPlatform;
	alias __u_char = u8;
	alias __u_short = u16;
	alias __u_int = u32;
	alias __u_long = u64;
	alias __int8_t = i8;
	alias __uint8_t = u8;
	alias __int16_t = i16;
	alias __uint16_t = u16;
	alias __int32_t = i32;
	alias __uint32_t = u32;
	alias __int64_t = i64;
	alias __uint64_t = u64;
	alias __int_least8_t = __int8_t;
	alias __uint_least8_t = __uint8_t;
	alias __int_least16_t = __int16_t;
	alias __uint_least16_t = __uint16_t;
	alias __int_least32_t = __int32_t;
	alias __uint_least32_t = __uint32_t;
	alias __int_least64_t = __int64_t;
	alias __uint_least64_t = __uint64_t;
	alias __quad_t = i64;
	alias __u_quad_t = u64;
	alias __intmax_t = i64;
	alias __uintmax_t = u64;
	alias __dev_t = u64;
	alias __uid_t = u32;
	alias __gid_t = u32;
	alias __ino_t = u64;
	alias __ino64_t = u64;
	alias __mode_t = u32;
	alias __nlink_t = u64;
	alias __off_t = i64;
	alias __off64_t = i64;
	alias __pid_t = i32;
	type __fsid_t = struct {(i32)^ __val;};
	alias __clock_t = i64;
	alias __rlim_t = u64;
	alias __rlim64_t = u64;
	alias __id_t = u32;
	alias __time_t = i64;
	alias __useconds_t = u32;
	alias __suseconds_t = i64;
	alias __suseconds64_t = i64;
	alias __daddr_t = i32;
	alias __key_t = i32;
	alias __clockid_t = i32;
	alias __timer_t = (u8)^;
	alias __blksize_t = i64;
	alias __blkcnt_t = i64;
	alias __blkcnt64_t = i64;
	alias __fsblkcnt_t = u64;
	alias __fsblkcnt64_t = u64;
	alias __fsfilcnt_t = u64;
	alias __fsfilcnt64_t = u64;
	alias __fsword_t = i64;
	alias __ssize_t = i64;
	alias __syscall_slong_t = i64;
	alias __syscall_ulong_t = u64;
	alias __loff_t = __off64_t;
	alias __caddr_t = (i8)^;
	alias __intptr_t = i64;
	alias __socklen_t = u32;
	alias __sig_atomic_t = i32;
	alias u_char = __u_char;
	alias u_short = __u_short;
	alias u_int = __u_int;
	alias u_long = __u_long;
	alias quad_t = __quad_t;
	alias u_quad_t = __u_quad_t;
	alias fsid_t = __fsid_t;
	alias loff_t = __loff_t;
	alias ino_t = __ino_t;
	alias dev_t = __dev_t;
	alias gid_t = __gid_t;
	alias mode_t = __mode_t;
	alias nlink_t = __nlink_t;
	alias uid_t = __uid_t;
	alias off_t = __off_t;
	alias pid_t = __pid_t;
	alias id_t = __id_t;
	alias ssize_t = __ssize_t;
	alias daddr_t = __daddr_t;
	alias caddr_t = __caddr_t;
	alias key_t = __key_t;
	alias clock_t = __clock_t;
	alias clockid_t = __clockid_t;
	alias time_t = __time_t;
	alias timer_t = __timer_t;
	alias size_t = u64;
	alias ulong = u64;
	alias ushort = u16;
	alias uint = u32;
	alias int8_t = __int8_t;
	alias int16_t = __int16_t;
	alias int32_t = __int32_t;
	alias int64_t = __int64_t;
	alias u_int8_t = __uint8_t;
	alias u_int16_t = __uint16_t;
	alias u_int32_t = __uint32_t;
	alias u_int64_t = __uint64_t;
	alias register_t = i32;
	type __sigset_t = struct {(u64)^ __val;};
	alias sigset_t = __sigset_t;
	alias suseconds_t = __suseconds_t;
	alias __fd_mask = i64;
	type fd_set = struct {(__fd_mask)^ __fds_bits;};
	alias fd_mask = __fd_mask;
	i32 -> (fd_set)^ -> (fd_set)^ -> (fd_set)^ -> (struct {u8^ empty;})^ -> i32 select;
	i32 -> (fd_set)^ -> (fd_set)^ -> (fd_set)^ -> (struct {u8^ empty;})^ -> (__sigset_t)^ -> i32 pselect;
	alias blksize_t = __blksize_t;
	alias blkcnt_t = __blkcnt_t;
	alias fsblkcnt_t = __fsblkcnt_t;
	alias fsfilcnt_t = __fsfilcnt_t;
	type __atomic_wide_counter = union {u64 __value64;struct {u32 __low;u32 __high;} __value32;};
	type __pthread_list_t = struct {u8^ empty;};
	type __pthread_slist_t = struct {u8^ empty;};
	alias __tss_t = u32;
	alias __thrd_t = u64;
	type __once_flag = struct {i32 __data;};
	alias pthread_t = u64;
	type pthread_mutexattr_t = union {(i8)^ __size;i32 __align;};
	type pthread_condattr_t = union {(i8)^ __size;i32 __align;};
	alias pthread_key_t = u32;
	alias pthread_once_t = i32;
	type pthread_attr_t = union {u8^ empty;};
	type pthread_mutex_t = union {struct {u8^ empty;} __data;(i8)^ __size;i64 __align;};
	type pthread_cond_t = union {struct {u8^ empty;} __data;(i8)^ __size;i64 __align;};
	type pthread_rwlock_t = union {struct {u8^ empty;} __data;(i8)^ __size;i64 __align;};
	type pthread_rwlockattr_t = union {(i8)^ __size;i64 __align;};
	alias pthread_spinlock_t = i32;
	type pthread_barrier_t = union {(i8)^ __size;i64 __align;};
	type pthread_barrierattr_t = union {(i8)^ __size;i32 __align;};
	alias __gnuc_va_list = u8^;
	type __mbstate_t = struct {i32 __count;union {u32 __wch;(i8)^ __wchb;} __value;};
	type __fpos_t = struct {u8^ empty;};
	type __fpos64_t = struct {u8^ empty;};
	type __FILE = struct {u8^ empty;};
	type FILE = struct {u8^ empty;};
	alias _IO_lock_t = u8;
	alias va_list = u8^;
	alias fpos_t = __fpos_t;
	(i8)^ -> i32 remove;
	(i8)^ -> (i8)^ -> i32 rename;
	i32 -> (i8)^ -> i32 -> (i8)^ -> i32 renameat;
	(FILE)^ -> i32 fclose;
	(FILE)^ tmpfile;
	(i8)^ -> (i8)^ tmpnam;
	(i8)^ -> (i8)^ tmpnam_r;
	(i8)^ -> (i8)^ -> (i8)^ tempnam;
	(FILE)^ -> i32 fflush;
	(FILE)^ -> i32 fflush_unlocked;
	(i8)^ -> (i8)^ -> (FILE)^ fopen;
	(i8)^ -> (i8)^ -> (FILE)^ -> (FILE)^ freopen;
	i32 -> (i8)^ -> (FILE)^ fdopen;
	(u8)^ -> size_t -> (i8)^ -> (FILE)^ fmemopen;
	((i8)^)^ -> (size_t)^ -> (FILE)^ open_memstream;
	(FILE)^ -> (i8)^ -> u8 setbuf;
	(FILE)^ -> (i8)^ -> i32 -> size_t -> i32 setvbuf;
	(FILE)^ -> (i8)^ -> size_t -> u8 setbuffer;
	(FILE)^ -> u8 setlinebuf;
	(FILE)^ -> (i8)^ -> __gnuc_va_list -> i32 vfprintf;
	(i8)^ -> __gnuc_va_list -> i32 vprintf;
	(i8)^ -> (i8)^ -> __gnuc_va_list -> i32 vsprintf;
	(i8)^ -> size_t -> (i8)^ -> __gnuc_va_list -> i32 vsnprintf;
	i32 -> (i8)^ -> __gnuc_va_list -> i32 vdprintf;
	alias _Float32 = f32;
	alias _Float64 = f64;
	alias _Float32x = f64;
	alias _Float64x = f64;
	(FILE)^ -> (i8)^ -> __gnuc_va_list -> i32 vfscanf;
	(i8)^ -> __gnuc_va_list -> i32 vscanf;
	(i8)^ -> (i8)^ -> __gnuc_va_list -> i32 vsscanf;
	(FILE)^ -> i32 fgetc;
	(FILE)^ -> i32 getc;
	i32 getchar;
	(FILE)^ -> i32 getc_unlocked;
	i32 getchar_unlocked;
	(FILE)^ -> i32 fgetc_unlocked;
	i32 -> (FILE)^ -> i32 fputc;
	i32 -> (FILE)^ -> i32 putc;
	i32 -> i32 putchar;
	i32 -> (FILE)^ -> i32 fputc_unlocked;
	i32 -> (FILE)^ -> i32 putc_unlocked;
	i32 -> i32 putchar_unlocked;
	(FILE)^ -> i32 getw;
	i32 -> (FILE)^ -> i32 putw;
	(i8)^ -> i32 -> (FILE)^ -> (i8)^ fgets;
	((i8)^)^ -> (size_t)^ -> i32 -> (FILE)^ -> __ssize_t __getdelim;
	((i8)^)^ -> (size_t)^ -> i32 -> (FILE)^ -> __ssize_t getdelim;
	((i8)^)^ -> (size_t)^ -> (FILE)^ -> __ssize_t getline;
	(i8)^ -> (FILE)^ -> i32 fputs;
	(i8)^ -> i32 puts;
	i32 -> (FILE)^ -> i32 ungetc;
	(u8)^ -> size_t -> size_t -> (FILE)^ -> u64 fread;
	(u8)^ -> size_t -> size_t -> (FILE)^ -> u64 fwrite;
	(u8)^ -> size_t -> size_t -> (FILE)^ -> size_t fread_unlocked;
	(u8)^ -> size_t -> size_t -> (FILE)^ -> size_t fwrite_unlocked;
	(FILE)^ -> i64 -> i32 -> i32 fseek;
	(FILE)^ -> i64 ftell;
	(FILE)^ -> u8 rewind;
	(FILE)^ -> __off_t -> i32 -> i32 fseeko;
	(FILE)^ -> __off_t ftello;
	(FILE)^ -> (fpos_t)^ -> i32 fgetpos;
	(FILE)^ -> (fpos_t)^ -> i32 fsetpos;
	(FILE)^ -> u8 clearerr;
	(FILE)^ -> i32 feof;
	(FILE)^ -> i32 ferror;
	(FILE)^ -> u8 clearerr_unlocked;
	(FILE)^ -> i32 feof_unlocked;
	(FILE)^ -> i32 ferror_unlocked;
	(i8)^ -> u8 perror;
	(FILE)^ -> i32 fileno;
	(FILE)^ -> i32 fileno_unlocked;
	(FILE)^ -> i32 pclose;
	(i8)^ -> (i8)^ -> (FILE)^ popen;
	(i8)^ -> (i8)^ ctermid;
	(FILE)^ -> u8 flockfile;
	(FILE)^ -> i32 ftrylockfile;
	(FILE)^ -> u8 funlockfile;
	(FILE)^ -> i32 __uflow;
	(FILE)^ -> i32 -> i32 __overflow;
	alias wchar_t = i32;
	type div_t = struct {i32 quot;i32 rem;};
	type ldiv_t = struct {i64 quot;i64 rem;};
	type lldiv_t = struct {i64 quot;i64 rem;};
	size_t __ctype_get_mb_cur_max;
	(i8)^ -> f64 atof;
	(i8)^ -> i32 atoi;
	(i8)^ -> i64 atol;
	(i8)^ -> i64 atoll;
	(i8)^ -> ((i8)^)^ -> f64 strtod;
	(i8)^ -> ((i8)^)^ -> f32 strtof;
	(i8)^ -> ((i8)^)^ -> f64 strtold;
	(i8)^ -> ((i8)^)^ -> i32 -> i64 strtol;
	(i8)^ -> ((i8)^)^ -> i32 -> u64 strtoul;
	(i8)^ -> ((i8)^)^ -> i32 -> i64 strtoq;
	(i8)^ -> ((i8)^)^ -> i32 -> u64 strtouq;
	(i8)^ -> ((i8)^)^ -> i32 -> i64 strtoll;
	(i8)^ -> ((i8)^)^ -> i32 -> u64 strtoull;
	i64 -> (i8)^ l64a;
	(i8)^ -> i64 a64l;
	i64 random;
	u32 -> u8 srandom;
	u32 -> (i8)^ -> size_t -> (i8)^ initstate;
	(i8)^ -> (i8)^ setstate;
	(struct {u8^ empty;})^ -> (int32_t)^ -> i32 random_r;
	u32 -> (struct {u8^ empty;})^ -> i32 srandom_r;
	u32 -> (i8)^ -> size_t -> (struct {u8^ empty;})^ -> i32 initstate_r;
	(i8)^ -> (struct {u8^ empty;})^ -> i32 setstate_r;
	i32 rand;
	u32 -> u8 srand;
	(u32)^ -> i32 rand_r;
	f64 drand48;
	(u16)^ -> f64 erand48;
	i64 lrand48;
	(u16)^ -> i64 nrand48;
	i64 mrand48;
	(u16)^ -> i64 jrand48;
	i64 -> u8 srand48;
	(u16)^ -> (u16)^ seed48;
	(u16)^ -> u8 lcong48;
	(struct {u8^ empty;})^ -> (f64)^ -> i32 drand48_r;
	(u16)^ -> (struct {u8^ empty;})^ -> (f64)^ -> i32 erand48_r;
	(struct {u8^ empty;})^ -> (i64)^ -> i32 lrand48_r;
	(u16)^ -> (struct {u8^ empty;})^ -> (i64)^ -> i32 nrand48_r;
	(struct {u8^ empty;})^ -> (i64)^ -> i32 mrand48_r;
	(u16)^ -> (struct {u8^ empty;})^ -> (i64)^ -> i32 jrand48_r;
	i64 -> (struct {u8^ empty;})^ -> i32 srand48_r;
	(u16)^ -> (struct {u8^ empty;})^ -> i32 seed48_r;
	(u16)^ -> (struct {u8^ empty;})^ -> i32 lcong48_r;
	__uint32_t arc4random;
	(u8)^ -> size_t -> u8 arc4random_buf;
	__uint32_t -> __uint32_t arc4random_uniform;
	size_t -> (u8)^ malloc;
	size_t -> size_t -> (u8)^ calloc;
	(u8)^ -> size_t -> (u8)^ realloc;
	(u8)^ -> u8 free;
	(u8)^ -> size_t -> size_t -> (u8)^ reallocarray;
	size_t -> (u8)^ alloca;
	size_t -> (u8)^ valloc;
	((u8)^)^ -> size_t -> size_t -> i32 posix_memalign;
	size_t -> size_t -> (u8)^ aligned_alloc;
	u8 abort;
	[u8] -> i32 atexit;
	[u8] -> i32 at_quick_exit;
	[u8] -> (u8)^ -> i32 on_exit;
	i32 -> u8 exit;
	i32 -> u8 quick_exit;
	i32 -> u8 _Exit;
	(i8)^ -> (i8)^ getenv;
	(i8)^ -> i32 putenv;
	(i8)^ -> (i8)^ -> i32 -> i32 setenv;
	(i8)^ -> i32 unsetenv;
	i32 clearenv;
	(i8)^ -> (i8)^ mktemp;
	(i8)^ -> i32 mkstemp;
	(i8)^ -> i32 -> i32 mkstemps;
	(i8)^ -> (i8)^ mkdtemp;
	(i8)^ -> i32 system;
	(i8)^ -> (i8)^ -> (i8)^ realpath;
	alias __compar_fn_t = [u8];
	(u8)^ -> (u8)^ -> size_t -> size_t -> __compar_fn_t -> (u8)^ bsearch;
	(u8)^ -> size_t -> size_t -> __compar_fn_t -> u8 qsort;
	i32 -> i32 abs;
	i64 -> i64 labs;
	i64 -> i64 llabs;
	i32 -> i32 -> div_t div;
	i64 -> i64 -> ldiv_t ldiv;
	i64 -> i64 -> lldiv_t lldiv;
	f64 -> i32 -> (i32)^ -> (i32)^ -> (i8)^ ecvt;
	f64 -> i32 -> (i32)^ -> (i32)^ -> (i8)^ fcvt;
	f64 -> i32 -> (i8)^ -> (i8)^ gcvt;
	f64 -> i32 -> (i32)^ -> (i32)^ -> (i8)^ qecvt;
	f64 -> i32 -> (i32)^ -> (i32)^ -> (i8)^ qfcvt;
	f64 -> i32 -> (i8)^ -> (i8)^ qgcvt;
	f64 -> i32 -> (i32)^ -> (i32)^ -> (i8)^ -> size_t -> i32 ecvt_r;
	f64 -> i32 -> (i32)^ -> (i32)^ -> (i8)^ -> size_t -> i32 fcvt_r;
	f64 -> i32 -> (i32)^ -> (i32)^ -> (i8)^ -> size_t -> i32 qecvt_r;
	f64 -> i32 -> (i32)^ -> (i32)^ -> (i8)^ -> size_t -> i32 qfcvt_r;
	(i8)^ -> size_t -> i32 mblen;
	(wchar_t)^ -> (i8)^ -> size_t -> i32 mbtowc;
	(i8)^ -> wchar_t -> i32 wctomb;
	(wchar_t)^ -> (i8)^ -> size_t -> size_t mbstowcs;
	(i8)^ -> (wchar_t)^ -> size_t -> size_t wcstombs;
	(i8)^ -> i32 rpmatch;
	((i8)^)^ -> ((i8)^)^ -> ((i8)^)^ -> i32 getsubopt;
	(f64)^ -> i32 -> i32 getloadavg;
	alias ptrdiff_t = i64;
	type max_align_t = struct {i64 __clang_max_align_nonce1;f64 __clang_max_align_nonce2;};
	(u8)^ -> (u8)^ -> size_t -> (u8)^ memcpy;
	(u8)^ -> (u8)^ -> size_t -> (u8)^ memmove;
	(u8)^ -> (u8)^ -> i32 -> size_t -> (u8)^ memccpy;
	(u8)^ -> i32 -> size_t -> (u8)^ memset;
	(u8)^ -> (u8)^ -> size_t -> i32 memcmp;
	(u8)^ -> (u8)^ -> size_t -> i32 __memcmpeq;
	(u8)^ -> i32 -> size_t -> (u8)^ memchr;
	(i8)^ -> (i8)^ -> (i8)^ strcpy;
	(i8)^ -> (i8)^ -> size_t -> (i8)^ strncpy;
	(i8)^ -> (i8)^ -> (i8)^ strcat;
	(i8)^ -> (i8)^ -> size_t -> (i8)^ strncat;
	(i8)^ -> (i8)^ -> i32 strcmp;
	(i8)^ -> (i8)^ -> size_t -> i32 strncmp;
	(i8)^ -> (i8)^ -> i32 strcoll;
	(i8)^ -> (i8)^ -> size_t -> u64 strxfrm;
	alias __locale_t = (struct {u8^ empty;})^;
	alias locale_t = __locale_t;
	(i8)^ -> (i8)^ -> locale_t -> i32 strcoll_l;
	(i8)^ -> (i8)^ -> size_t -> locale_t -> size_t strxfrm_l;
	(i8)^ -> (i8)^ strdup;
	(i8)^ -> size_t -> (i8)^ strndup;
	(i8)^ -> i32 -> (i8)^ strchr;
	(i8)^ -> i32 -> (i8)^ strrchr;
	(i8)^ -> (i8)^ -> u64 strcspn;
	(i8)^ -> (i8)^ -> u64 strspn;
	(i8)^ -> (i8)^ -> (i8)^ strpbrk;
	(i8)^ -> (i8)^ -> (i8)^ strstr;
	(i8)^ -> (i8)^ -> (i8)^ strtok;
	(i8)^ -> (i8)^ -> ((i8)^)^ -> (i8)^ __strtok_r;
	(i8)^ -> (i8)^ -> ((i8)^)^ -> (i8)^ strtok_r;
	(i8)^ -> u64 strlen;
	(i8)^ -> size_t -> size_t strnlen;
	i32 -> (i8)^ strerror;
	i32 -> (i8)^ -> size_t -> i32 strerror_r;
	i32 -> locale_t -> (i8)^ strerror_l;
	(u8)^ -> (u8)^ -> size_t -> i32 bcmp;
	(u8)^ -> (u8)^ -> size_t -> u8 bcopy;
	(u8)^ -> size_t -> u8 bzero;
	(i8)^ -> i32 -> (i8)^ index;
	(i8)^ -> i32 -> (i8)^ rindex;
	i32 -> i32 ffs;
	i64 -> i32 ffsl;
	i64 -> i32 ffsll;
	(i8)^ -> (i8)^ -> i32 strcasecmp;
	(i8)^ -> (i8)^ -> size_t -> i32 strncasecmp;
	(i8)^ -> (i8)^ -> locale_t -> i32 strcasecmp_l;
	(i8)^ -> (i8)^ -> size_t -> locale_t -> i32 strncasecmp_l;
	(u8)^ -> size_t -> u8 explicit_bzero;
	((i8)^)^ -> (i8)^ -> (i8)^ strsep;
	i32 -> (i8)^ strsignal;
	(i8)^ -> (i8)^ -> (i8)^ __stpcpy;
	(i8)^ -> (i8)^ -> (i8)^ stpcpy;
	(i8)^ -> (i8)^ -> size_t -> (i8)^ __stpncpy;
	(i8)^ -> (i8)^ -> size_t -> (i8)^ stpncpy;
	alias wint_t = u32;
	alias mbstate_t = __mbstate_t;
	(wchar_t)^ -> (wchar_t)^ -> (wchar_t)^ wcscpy;
	(wchar_t)^ -> (wchar_t)^ -> size_t -> (wchar_t)^ wcsncpy;
	(wchar_t)^ -> (wchar_t)^ -> (wchar_t)^ wcscat;
	(wchar_t)^ -> (wchar_t)^ -> size_t -> (wchar_t)^ wcsncat;
	(wchar_t)^ -> (wchar_t)^ -> i32 wcscmp;
	(wchar_t)^ -> (wchar_t)^ -> size_t -> i32 wcsncmp;
	(wchar_t)^ -> (wchar_t)^ -> i32 wcscasecmp;
	(wchar_t)^ -> (wchar_t)^ -> size_t -> i32 wcsncasecmp;
	(wchar_t)^ -> (wchar_t)^ -> locale_t -> i32 wcscasecmp_l;
	(wchar_t)^ -> (wchar_t)^ -> size_t -> locale_t -> i32 wcsncasecmp_l;
	(wchar_t)^ -> (wchar_t)^ -> i32 wcscoll;
	(wchar_t)^ -> (wchar_t)^ -> size_t -> size_t wcsxfrm;
	(wchar_t)^ -> (wchar_t)^ -> locale_t -> i32 wcscoll_l;
	(wchar_t)^ -> (wchar_t)^ -> size_t -> locale_t -> size_t wcsxfrm_l;
	(wchar_t)^ -> (wchar_t)^ wcsdup;
	(wchar_t)^ -> wchar_t -> (i32)^ wcschr;
	(wchar_t)^ -> wchar_t -> (wchar_t)^ wcsrchr;
	(wchar_t)^ -> (wchar_t)^ -> size_t wcscspn;
	(wchar_t)^ -> (wchar_t)^ -> size_t wcsspn;
	(wchar_t)^ -> (wchar_t)^ -> (wchar_t)^ wcspbrk;
	(wchar_t)^ -> (wchar_t)^ -> (wchar_t)^ wcsstr;
	(wchar_t)^ -> (wchar_t)^ -> ((wchar_t)^)^ -> (wchar_t)^ wcstok;
	(wchar_t)^ -> u64 wcslen;
	(wchar_t)^ -> size_t -> size_t wcsnlen;
	(wchar_t)^ -> wchar_t -> size_t -> (i32)^ wmemchr;
	(wchar_t)^ -> (wchar_t)^ -> size_t -> i32 wmemcmp;
	(wchar_t)^ -> (wchar_t)^ -> size_t -> (i32)^ wmemcpy;
	(wchar_t)^ -> (wchar_t)^ -> size_t -> (i32)^ wmemmove;
	(wchar_t)^ -> wchar_t -> size_t -> (wchar_t)^ wmemset;
	i32 -> wint_t btowc;
	wint_t -> i32 wctob;
	(mbstate_t)^ -> i32 mbsinit;
	(wchar_t)^ -> (i8)^ -> size_t -> (mbstate_t)^ -> size_t mbrtowc;
	(i8)^ -> wchar_t -> (mbstate_t)^ -> size_t wcrtomb;
	(i8)^ -> size_t -> (mbstate_t)^ -> size_t __mbrlen;
	(i8)^ -> size_t -> (mbstate_t)^ -> size_t mbrlen;
	(wchar_t)^ -> ((i8)^)^ -> size_t -> (mbstate_t)^ -> size_t mbsrtowcs;
	(i8)^ -> ((wchar_t)^)^ -> size_t -> (mbstate_t)^ -> size_t wcsrtombs;
	(wchar_t)^ -> ((i8)^)^ -> size_t -> size_t -> (mbstate_t)^ -> size_t mbsnrtowcs;
	(i8)^ -> ((wchar_t)^)^ -> size_t -> size_t -> (mbstate_t)^ -> size_t wcsnrtombs;
	(wchar_t)^ -> ((wchar_t)^)^ -> f64 wcstod;
	(wchar_t)^ -> ((wchar_t)^)^ -> f32 wcstof;
	(wchar_t)^ -> ((wchar_t)^)^ -> f64 wcstold;
	(wchar_t)^ -> ((wchar_t)^)^ -> i32 -> i64 wcstol;
	(wchar_t)^ -> ((wchar_t)^)^ -> i32 -> u64 wcstoul;
	(wchar_t)^ -> ((wchar_t)^)^ -> i32 -> i64 wcstoll;
	(wchar_t)^ -> ((wchar_t)^)^ -> i32 -> u64 wcstoull;
	(wchar_t)^ -> (wchar_t)^ -> (wchar_t)^ wcpcpy;
	(wchar_t)^ -> (wchar_t)^ -> size_t -> (wchar_t)^ wcpncpy;
	((wchar_t)^)^ -> (size_t)^ -> (__FILE)^ open_wmemstream;
	(__FILE)^ -> i32 -> i32 fwide;
	(__FILE)^ -> (wchar_t)^ -> __gnuc_va_list -> i32 vfwprintf;
	(wchar_t)^ -> __gnuc_va_list -> i32 vwprintf;
	(wchar_t)^ -> size_t -> (wchar_t)^ -> __gnuc_va_list -> i32 vswprintf;
	(__FILE)^ -> (wchar_t)^ -> __gnuc_va_list -> i32 vfwscanf;
	(wchar_t)^ -> __gnuc_va_list -> i32 vwscanf;
	(wchar_t)^ -> (wchar_t)^ -> __gnuc_va_list -> i32 vswscanf;
	(__FILE)^ -> wint_t fgetwc;
	(__FILE)^ -> wint_t getwc;
	wint_t getwchar;
	wchar_t -> (__FILE)^ -> wint_t fputwc;
	wchar_t -> (__FILE)^ -> wint_t putwc;
	wchar_t -> wint_t putwchar;
	(wchar_t)^ -> i32 -> (__FILE)^ -> (wchar_t)^ fgetws;
	(wchar_t)^ -> (__FILE)^ -> i32 fputws;
	wint_t -> (__FILE)^ -> wint_t ungetwc;
	(wchar_t)^ -> size_t -> (wchar_t)^ -> (struct {u8^ empty;})^ -> size_t wcsftime;
	alias uint8_t = __uint8_t;
	alias uint16_t = __uint16_t;
	alias uint32_t = __uint32_t;
	alias uint64_t = __uint64_t;
	alias int_least8_t = __int_least8_t;
	alias int_least16_t = __int_least16_t;
	alias int_least32_t = __int_least32_t;
	alias int_least64_t = __int_least64_t;
	alias uint_least8_t = __uint_least8_t;
	alias uint_least16_t = __uint_least16_t;
	alias uint_least32_t = __uint_least32_t;
	alias uint_least64_t = __uint_least64_t;
	alias int_fast8_t = i8;
	alias int_fast16_t = i64;
	alias int_fast32_t = i64;
	alias int_fast64_t = i64;
	alias uint_fast8_t = u8;
	alias uint_fast16_t = u64;
	alias uint_fast32_t = u64;
	alias uint_fast64_t = u64;
	alias intptr_t = i64;
	alias uintptr_t = u64;
	alias intmax_t = __intmax_t;
	alias uintmax_t = __uintmax_t;
	alias __gwchar_t = i32;
	type imaxdiv_t = struct {i64 quot;i64 rem;};
	intmax_t -> intmax_t imaxabs;
	intmax_t -> intmax_t -> imaxdiv_t imaxdiv;
	(i8)^ -> ((i8)^)^ -> i32 -> intmax_t strtoimax;
	(i8)^ -> ((i8)^)^ -> i32 -> uintmax_t strtoumax;
	(__gwchar_t)^ -> ((__gwchar_t)^)^ -> i32 -> intmax_t wcstoimax;
	(__gwchar_t)^ -> ((__gwchar_t)^)^ -> i32 -> uintmax_t wcstoumax;
	((u16)^)^ __ctype_b_loc;
	((__int32_t)^)^ __ctype_tolower_loc;
	((__int32_t)^)^ __ctype_toupper_loc;
	i32 -> i32 isalnum;
	i32 -> i32 isalpha;
	i32 -> i32 iscntrl;
	i32 -> i32 isdigit;
	i32 -> i32 islower;
	i32 -> i32 isgraph;
	i32 -> i32 isprint;
	i32 -> i32 ispunct;
	i32 -> i32 isspace;
	i32 -> i32 isupper;
	i32 -> i32 isxdigit;
	i32 -> i32 tolower;
	i32 -> i32 toupper;
	i32 -> i32 isblank;
	i32 -> i32 isascii;
	i32 -> i32 toascii;
	i32 -> i32 _toupper;
	i32 -> i32 _tolower;
	i32 -> locale_t -> i32 isalnum_l;
	i32 -> locale_t -> i32 isalpha_l;
	i32 -> locale_t -> i32 iscntrl_l;
	i32 -> locale_t -> i32 isdigit_l;
	i32 -> locale_t -> i32 islower_l;
	i32 -> locale_t -> i32 isgraph_l;
	i32 -> locale_t -> i32 isprint_l;
	i32 -> locale_t -> i32 ispunct_l;
	i32 -> locale_t -> i32 isspace_l;
	i32 -> locale_t -> i32 isupper_l;
	i32 -> locale_t -> i32 isxdigit_l;
	i32 -> locale_t -> i32 isblank_l;
	i32 -> locale_t -> i32 __tolower_l;
	i32 -> locale_t -> i32 tolower_l;
	i32 -> locale_t -> i32 __toupper_l;
	i32 -> locale_t -> i32 toupper_l;
	alias float_t = f32;
	alias double_t = f64;
	f64 -> i32 __fpclassify;
	f64 -> i32 __signbit;
	f64 -> i32 __isinf;
	f64 -> i32 __finite;
	f64 -> i32 __isnan;
	f64 -> f64 -> i32 __iseqsig;
	f64 -> i32 __issignaling;
	f64 -> f64 acos;
	f64 -> f64 __acos;
	f64 -> f64 asin;
	f64 -> f64 __asin;
	f64 -> f64 atan;
	f64 -> f64 __atan;
	f64 -> f64 -> f64 atan2;
	f64 -> f64 -> f64 __atan2;
	f64 -> f64 cos;
	f64 -> f64 __cos;
	f64 -> f64 sin;
	f64 -> f64 __sin;
	f64 -> f64 tan;
	f64 -> f64 __tan;
	f64 -> f64 cosh;
	f64 -> f64 __cosh;
	f64 -> f64 sinh;
	f64 -> f64 __sinh;
	f64 -> f64 tanh;
	f64 -> f64 __tanh;
	f64 -> f64 acosh;
	f64 -> f64 __acosh;
	f64 -> f64 asinh;
	f64 -> f64 __asinh;
	f64 -> f64 atanh;
	f64 -> f64 __atanh;
	f64 -> f64 exp;
	f64 -> f64 __exp;
	f64 -> (i32)^ -> f64 frexp;
	f64 -> (i32)^ -> f64 __frexp;
	f64 -> i32 -> f64 ldexp;
	f64 -> i32 -> f64 __ldexp;
	f64 -> f64 log;
	f64 -> f64 __log;
	f64 -> f64 log10;
	f64 -> f64 __log10;
	f64 -> (f64)^ -> f64 modf;
	f64 -> (f64)^ -> f64 __modf;
	f64 -> f64 expm1;
	f64 -> f64 __expm1;
	f64 -> f64 log1p;
	f64 -> f64 __log1p;
	f64 -> f64 logb;
	f64 -> f64 __logb;
	f64 -> f64 exp2;
	f64 -> f64 __exp2;
	f64 -> f64 log2;
	f64 -> f64 __log2;
	f64 -> f64 -> f64 pow;
	f64 -> f64 -> f64 __pow;
	f64 -> f64 sqrt;
	f64 -> f64 __sqrt;
	f64 -> f64 -> f64 hypot;
	f64 -> f64 -> f64 __hypot;
	f64 -> f64 cbrt;
	f64 -> f64 __cbrt;
	f64 -> f64 ceil;
	f64 -> f64 __ceil;
	f64 -> f64 fabs;
	f64 -> f64 __fabs;
	f64 -> f64 floor;
	f64 -> f64 __floor;
	f64 -> f64 -> f64 fmod;
	f64 -> f64 -> f64 __fmod;
	f64 -> i32 isinf;
	f64 -> i32 finite;
	f64 -> f64 -> f64 drem;
	f64 -> f64 -> f64 __drem;
	f64 -> f64 significand;
	f64 -> f64 __significand;
	f64 -> f64 -> f64 copysign;
	f64 -> f64 -> f64 __copysign;
	(i8)^ -> f64 nan;
	(i8)^ -> f64 __nan;
	f64 -> i32 isnan;
	f64 -> f64 j0;
	f64 -> f64 __j0;
	f64 -> f64 j1;
	f64 -> f64 __j1;
	i32 -> f64 -> f64 jn;
	i32 -> f64 -> f64 __jn;
	f64 -> f64 y0;
	f64 -> f64 __y0;
	f64 -> f64 y1;
	f64 -> f64 __y1;
	i32 -> f64 -> f64 yn;
	i32 -> f64 -> f64 __yn;
	f64 -> f64 erf;
	f64 -> f64 __erf;
	f64 -> f64 erfc;
	f64 -> f64 __erfc;
	f64 -> f64 lgamma;
	f64 -> f64 __lgamma;
	f64 -> f64 tgamma;
	f64 -> f64 __tgamma;
	f64 -> f64 gamma;
	f64 -> f64 __gamma;
	f64 -> (i32)^ -> f64 lgamma_r;
	f64 -> (i32)^ -> f64 __lgamma_r;
	f64 -> f64 rint;
	f64 -> f64 __rint;
	f64 -> f64 -> f64 nextafter;
	f64 -> f64 -> f64 __nextafter;
	f64 -> f64 -> f64 nexttoward;
	f64 -> f64 -> f64 __nexttoward;
	f64 -> f64 -> f64 remainder;
	f64 -> f64 -> f64 __remainder;
	f64 -> i32 -> f64 scalbn;
	f64 -> i32 -> f64 __scalbn;
	f64 -> i32 ilogb;
	f64 -> i32 __ilogb;
	f64 -> i64 -> f64 scalbln;
	f64 -> i64 -> f64 __scalbln;
	f64 -> f64 nearbyint;
	f64 -> f64 __nearbyint;
	f64 -> f64 round;
	f64 -> f64 __round;
	f64 -> f64 trunc;
	f64 -> f64 __trunc;
	f64 -> f64 -> (i32)^ -> f64 remquo;
	f64 -> f64 -> (i32)^ -> f64 __remquo;
	f64 -> i64 lrint;
	f64 -> i64 __lrint;
	f64 -> i64 llrint;
	f64 -> i64 __llrint;
	f64 -> i64 lround;
	f64 -> i64 __lround;
	f64 -> i64 llround;
	f64 -> i64 __llround;
	f64 -> f64 -> f64 fdim;
	f64 -> f64 -> f64 __fdim;
	f64 -> f64 -> f64 fmax;
	f64 -> f64 -> f64 __fmax;
	f64 -> f64 -> f64 fmin;
	f64 -> f64 -> f64 __fmin;
	f64 -> f64 -> f64 -> f64 fma;
	f64 -> f64 -> f64 -> f64 __fma;
	f64 -> f64 -> f64 scalb;
	f64 -> f64 -> f64 __scalb;
	f32 -> i32 __fpclassifyf;
	f32 -> i32 __signbitf;
	f32 -> i32 __isinff;
	f32 -> i32 __finitef;
	f32 -> i32 __isnanf;
	f32 -> f32 -> i32 __iseqsigf;
	f32 -> i32 __issignalingf;
	f32 -> f32 acosf;
	f32 -> f32 __acosf;
	f32 -> f32 asinf;
	f32 -> f32 __asinf;
	f32 -> f32 atanf;
	f32 -> f32 __atanf;
	f32 -> f32 -> f32 atan2f;
	f32 -> f32 -> f32 __atan2f;
	f32 -> f32 cosf;
	f32 -> f32 __cosf;
	f32 -> f32 sinf;
	f32 -> f32 __sinf;
	f32 -> f32 tanf;
	f32 -> f32 __tanf;
	f32 -> f32 coshf;
	f32 -> f32 __coshf;
	f32 -> f32 sinhf;
	f32 -> f32 __sinhf;
	f32 -> f32 tanhf;
	f32 -> f32 __tanhf;
	f32 -> f32 acoshf;
	f32 -> f32 __acoshf;
	f32 -> f32 asinhf;
	f32 -> f32 __asinhf;
	f32 -> f32 atanhf;
	f32 -> f32 __atanhf;
	f32 -> f32 expf;
	f32 -> f32 __expf;
	f32 -> (i32)^ -> f32 frexpf;
	f32 -> (i32)^ -> f32 __frexpf;
	f32 -> i32 -> f32 ldexpf;
	f32 -> i32 -> f32 __ldexpf;
	f32 -> f32 logf;
	f32 -> f32 __logf;
	f32 -> f32 log10f;
	f32 -> f32 __log10f;
	f32 -> (f32)^ -> f32 modff;
	f32 -> (f32)^ -> f32 __modff;
	f32 -> f32 expm1f;
	f32 -> f32 __expm1f;
	f32 -> f32 log1pf;
	f32 -> f32 __log1pf;
	f32 -> f32 logbf;
	f32 -> f32 __logbf;
	f32 -> f32 exp2f;
	f32 -> f32 __exp2f;
	f32 -> f32 log2f;
	f32 -> f32 __log2f;
	f32 -> f32 -> f32 powf;
	f32 -> f32 -> f32 __powf;
	f32 -> f32 sqrtf;
	f32 -> f32 __sqrtf;
	f32 -> f32 -> f32 hypotf;
	f32 -> f32 -> f32 __hypotf;
	f32 -> f32 cbrtf;
	f32 -> f32 __cbrtf;
	f32 -> f32 ceilf;
	f32 -> f32 __ceilf;
	f32 -> f32 fabsf;
	f32 -> f32 __fabsf;
	f32 -> f32 floorf;
	f32 -> f32 __floorf;
	f32 -> f32 -> f32 fmodf;
	f32 -> f32 -> f32 __fmodf;
	f32 -> i32 isinff;
	f32 -> i32 finitef;
	f32 -> f32 -> f32 dremf;
	f32 -> f32 -> f32 __dremf;
	f32 -> f32 significandf;
	f32 -> f32 __significandf;
	f32 -> f32 -> f32 copysignf;
	f32 -> f32 -> f32 __copysignf;
	(i8)^ -> f32 nanf;
	(i8)^ -> f32 __nanf;
	f32 -> i32 isnanf;
	f32 -> f32 j0f;
	f32 -> f32 __j0f;
	f32 -> f32 j1f;
	f32 -> f32 __j1f;
	i32 -> f32 -> f32 jnf;
	i32 -> f32 -> f32 __jnf;
	f32 -> f32 y0f;
	f32 -> f32 __y0f;
	f32 -> f32 y1f;
	f32 -> f32 __y1f;
	i32 -> f32 -> f32 ynf;
	i32 -> f32 -> f32 __ynf;
	f32 -> f32 erff;
	f32 -> f32 __erff;
	f32 -> f32 erfcf;
	f32 -> f32 __erfcf;
	f32 -> f32 lgammaf;
	f32 -> f32 __lgammaf;
	f32 -> f32 tgammaf;
	f32 -> f32 __tgammaf;
	f32 -> f32 gammaf;
	f32 -> f32 __gammaf;
	f32 -> (i32)^ -> f32 lgammaf_r;
	f32 -> (i32)^ -> f32 __lgammaf_r;
	f32 -> f32 rintf;
	f32 -> f32 __rintf;
	f32 -> f32 -> f32 nextafterf;
	f32 -> f32 -> f32 __nextafterf;
	f32 -> f64 -> f32 nexttowardf;
	f32 -> f64 -> f32 __nexttowardf;
	f32 -> f32 -> f32 remainderf;
	f32 -> f32 -> f32 __remainderf;
	f32 -> i32 -> f32 scalbnf;
	f32 -> i32 -> f32 __scalbnf;
	f32 -> i32 ilogbf;
	f32 -> i32 __ilogbf;
	f32 -> i64 -> f32 scalblnf;
	f32 -> i64 -> f32 __scalblnf;
	f32 -> f32 nearbyintf;
	f32 -> f32 __nearbyintf;
	f32 -> f32 roundf;
	f32 -> f32 __roundf;
	f32 -> f32 truncf;
	f32 -> f32 __truncf;
	f32 -> f32 -> (i32)^ -> f32 remquof;
	f32 -> f32 -> (i32)^ -> f32 __remquof;
	f32 -> i64 lrintf;
	f32 -> i64 __lrintf;
	f32 -> i64 llrintf;
	f32 -> i64 __llrintf;
	f32 -> i64 lroundf;
	f32 -> i64 __lroundf;
	f32 -> i64 llroundf;
	f32 -> i64 __llroundf;
	f32 -> f32 -> f32 fdimf;
	f32 -> f32 -> f32 __fdimf;
	f32 -> f32 -> f32 fmaxf;
	f32 -> f32 -> f32 __fmaxf;
	f32 -> f32 -> f32 fminf;
	f32 -> f32 -> f32 __fminf;
	f32 -> f32 -> f32 -> f32 fmaf;
	f32 -> f32 -> f32 -> f32 __fmaf;
	f32 -> f32 -> f32 scalbf;
	f32 -> f32 -> f32 __scalbf;
	f64 -> i32 __fpclassifyl;
	f64 -> i32 __signbitl;
	f64 -> i32 __isinfl;
	f64 -> i32 __finitel;
	f64 -> i32 __isnanl;
	f64 -> f64 -> i32 __iseqsigl;
	f64 -> i32 __issignalingl;
	f64 -> f64 acosl;
	f64 -> f64 __acosl;
	f64 -> f64 asinl;
	f64 -> f64 __asinl;
	f64 -> f64 atanl;
	f64 -> f64 __atanl;
	f64 -> f64 -> f64 atan2l;
	f64 -> f64 -> f64 __atan2l;
	f64 -> f64 cosl;
	f64 -> f64 __cosl;
	f64 -> f64 sinl;
	f64 -> f64 __sinl;
	f64 -> f64 tanl;
	f64 -> f64 __tanl;
	f64 -> f64 coshl;
	f64 -> f64 __coshl;
	f64 -> f64 sinhl;
	f64 -> f64 __sinhl;
	f64 -> f64 tanhl;
	f64 -> f64 __tanhl;
	f64 -> f64 acoshl;
	f64 -> f64 __acoshl;
	f64 -> f64 asinhl;
	f64 -> f64 __asinhl;
	f64 -> f64 atanhl;
	f64 -> f64 __atanhl;
	f64 -> f64 expl;
	f64 -> f64 __expl;
	f64 -> (i32)^ -> f64 frexpl;
	f64 -> (i32)^ -> f64 __frexpl;
	f64 -> i32 -> f64 ldexpl;
	f64 -> i32 -> f64 __ldexpl;
	f64 -> f64 logl;
	f64 -> f64 __logl;
	f64 -> f64 log10l;
	f64 -> f64 __log10l;
	f64 -> (f64)^ -> f64 modfl;
	f64 -> (f64)^ -> f64 __modfl;
	f64 -> f64 expm1l;
	f64 -> f64 __expm1l;
	f64 -> f64 log1pl;
	f64 -> f64 __log1pl;
	f64 -> f64 logbl;
	f64 -> f64 __logbl;
	f64 -> f64 exp2l;
	f64 -> f64 __exp2l;
	f64 -> f64 log2l;
	f64 -> f64 __log2l;
	f64 -> f64 -> f64 powl;
	f64 -> f64 -> f64 __powl;
	f64 -> f64 sqrtl;
	f64 -> f64 __sqrtl;
	f64 -> f64 -> f64 hypotl;
	f64 -> f64 -> f64 __hypotl;
	f64 -> f64 cbrtl;
	f64 -> f64 __cbrtl;
	f64 -> f64 ceill;
	f64 -> f64 __ceill;
	f64 -> f64 fabsl;
	f64 -> f64 __fabsl;
	f64 -> f64 floorl;
	f64 -> f64 __floorl;
	f64 -> f64 -> f64 fmodl;
	f64 -> f64 -> f64 __fmodl;
	f64 -> i32 isinfl;
	f64 -> i32 finitel;
	f64 -> f64 -> f64 dreml;
	f64 -> f64 -> f64 __dreml;
	f64 -> f64 significandl;
	f64 -> f64 __significandl;
	f64 -> f64 -> f64 copysignl;
	f64 -> f64 -> f64 __copysignl;
	(i8)^ -> f64 nanl;
	(i8)^ -> f64 __nanl;
	f64 -> i32 isnanl;
	f64 -> f64 j0l;
	f64 -> f64 __j0l;
	f64 -> f64 j1l;
	f64 -> f64 __j1l;
	i32 -> f64 -> f64 jnl;
	i32 -> f64 -> f64 __jnl;
	f64 -> f64 y0l;
	f64 -> f64 __y0l;
	f64 -> f64 y1l;
	f64 -> f64 __y1l;
	i32 -> f64 -> f64 ynl;
	i32 -> f64 -> f64 __ynl;
	f64 -> f64 erfl;
	f64 -> f64 __erfl;
	f64 -> f64 erfcl;
	f64 -> f64 __erfcl;
	f64 -> f64 lgammal;
	f64 -> f64 __lgammal;
	f64 -> f64 tgammal;
	f64 -> f64 __tgammal;
	f64 -> f64 gammal;
	f64 -> f64 __gammal;
	f64 -> (i32)^ -> f64 lgammal_r;
	f64 -> (i32)^ -> f64 __lgammal_r;
	f64 -> f64 rintl;
	f64 -> f64 __rintl;
	f64 -> f64 -> f64 nextafterl;
	f64 -> f64 -> f64 __nextafterl;
	f64 -> f64 -> f64 nexttowardl;
	f64 -> f64 -> f64 __nexttowardl;
	f64 -> f64 -> f64 remainderl;
	f64 -> f64 -> f64 __remainderl;
	f64 -> i32 -> f64 scalbnl;
	f64 -> i32 -> f64 __scalbnl;
	f64 -> i32 ilogbl;
	f64 -> i32 __ilogbl;
	f64 -> i64 -> f64 scalblnl;
	f64 -> i64 -> f64 __scalblnl;
	f64 -> f64 nearbyintl;
	f64 -> f64 __nearbyintl;
	f64 -> f64 roundl;
	f64 -> f64 __roundl;
	f64 -> f64 truncl;
	f64 -> f64 __truncl;
	f64 -> f64 -> (i32)^ -> f64 remquol;
	f64 -> f64 -> (i32)^ -> f64 __remquol;
	f64 -> i64 lrintl;
	f64 -> i64 __lrintl;
	f64 -> i64 llrintl;
	f64 -> i64 __llrintl;
	f64 -> i64 lroundl;
	f64 -> i64 __lroundl;
	f64 -> i64 llroundl;
	f64 -> i64 __llroundl;
	f64 -> f64 -> f64 fdiml;
	f64 -> f64 -> f64 __fdiml;
	f64 -> f64 -> f64 fmaxl;
	f64 -> f64 -> f64 __fmaxl;
	f64 -> f64 -> f64 fminl;
	f64 -> f64 -> f64 __fminl;
	f64 -> f64 -> f64 -> f64 fmal;
	f64 -> f64 -> f64 -> f64 __fmal;
	f64 -> f64 -> f64 scalbl;
	f64 -> f64 -> f64 __scalbl;
	type SDL_bool = enum {INK_ENUM_EXTERN0};
	alias Sint8 = int8_t;
	alias Uint8 = uint8_t;
	alias Sint16 = int16_t;
	alias Uint16 = uint16_t;
	alias Sint32 = int32_t;
	alias Uint32 = uint32_t;
	alias Sint64 = int64_t;
	alias Uint64 = uint64_t;
	type SDL_DUMMY_ENUM = enum {INK_ENUM_EXTERN1};
	size_t -> (u8)^ SDL_malloc;
	size_t -> size_t -> (u8)^ SDL_calloc;
	(u8)^ -> size_t -> (u8)^ SDL_realloc;
	(u8)^ -> u8 SDL_free;
	alias SDL_malloc_func = [u8];
	alias SDL_calloc_func = [u8];
	alias SDL_realloc_func = [u8];
	alias SDL_free_func = [u8];
	(SDL_malloc_func)^ -> (SDL_calloc_func)^ -> (SDL_realloc_func)^ -> (SDL_free_func)^ -> u8 SDL_GetOriginalMemoryFunctions;
	(SDL_malloc_func)^ -> (SDL_calloc_func)^ -> (SDL_realloc_func)^ -> (SDL_free_func)^ -> u8 SDL_GetMemoryFunctions;
	SDL_malloc_func -> SDL_calloc_func -> SDL_realloc_func -> SDL_free_func -> i32 SDL_SetMemoryFunctions;
	i32 SDL_GetNumAllocations;
	(i8)^ -> (i8)^ SDL_getenv;
	(i8)^ -> (i8)^ -> i32 -> i32 SDL_setenv;
	(u8)^ -> size_t -> size_t -> [u8] -> u8 SDL_qsort;
	(u8)^ -> (u8)^ -> size_t -> size_t -> [u8] -> (u8)^ SDL_bsearch;
	i32 -> i32 SDL_abs;
	i32 -> i32 SDL_isalpha;
	i32 -> i32 SDL_isalnum;
	i32 -> i32 SDL_isblank;
	i32 -> i32 SDL_iscntrl;
	i32 -> i32 SDL_isdigit;
	i32 -> i32 SDL_isxdigit;
	i32 -> i32 SDL_ispunct;
	i32 -> i32 SDL_isspace;
	i32 -> i32 SDL_isupper;
	i32 -> i32 SDL_islower;
	i32 -> i32 SDL_isprint;
	i32 -> i32 SDL_isgraph;
	i32 -> i32 SDL_toupper;
	i32 -> i32 SDL_tolower;
	Uint16 -> (u8)^ -> size_t -> Uint16 SDL_crc16;
	Uint32 -> (u8)^ -> size_t -> Uint32 SDL_crc32;
	(u8)^ -> i32 -> size_t -> (u8)^ SDL_memset;
	(u8)^ -> (u8)^ -> size_t -> (u8)^ SDL_memcpy;
	(u8)^ -> (u8)^ -> size_t -> (u8)^ SDL_memmove;
	(u8)^ -> (u8)^ -> size_t -> i32 SDL_memcmp;
	(wchar_t)^ -> size_t SDL_wcslen;
	(wchar_t)^ -> (wchar_t)^ -> size_t -> size_t SDL_wcslcpy;
	(wchar_t)^ -> (wchar_t)^ -> size_t -> size_t SDL_wcslcat;
	(wchar_t)^ -> (wchar_t)^ SDL_wcsdup;
	(wchar_t)^ -> (wchar_t)^ -> (wchar_t)^ SDL_wcsstr;
	(wchar_t)^ -> (wchar_t)^ -> i32 SDL_wcscmp;
	(wchar_t)^ -> (wchar_t)^ -> size_t -> i32 SDL_wcsncmp;
	(wchar_t)^ -> (wchar_t)^ -> i32 SDL_wcscasecmp;
	(wchar_t)^ -> (wchar_t)^ -> size_t -> i32 SDL_wcsncasecmp;
	(i8)^ -> size_t SDL_strlen;
	(i8)^ -> (i8)^ -> size_t -> size_t SDL_strlcpy;
	(i8)^ -> (i8)^ -> size_t -> size_t SDL_utf8strlcpy;
	(i8)^ -> (i8)^ -> size_t -> size_t SDL_strlcat;
	(i8)^ -> (i8)^ SDL_strdup;
	(i8)^ -> (i8)^ SDL_strrev;
	(i8)^ -> (i8)^ SDL_strupr;
	(i8)^ -> (i8)^ SDL_strlwr;
	(i8)^ -> i32 -> (i8)^ SDL_strchr;
	(i8)^ -> i32 -> (i8)^ SDL_strrchr;
	(i8)^ -> (i8)^ -> (i8)^ SDL_strstr;
	(i8)^ -> (i8)^ -> (i8)^ SDL_strcasestr;
	(i8)^ -> (i8)^ -> ((i8)^)^ -> (i8)^ SDL_strtokr;
	(i8)^ -> size_t SDL_utf8strlen;
	(i8)^ -> size_t -> size_t SDL_utf8strnlen;
	i32 -> (i8)^ -> i32 -> (i8)^ SDL_itoa;
	u32 -> (i8)^ -> i32 -> (i8)^ SDL_uitoa;
	i64 -> (i8)^ -> i32 -> (i8)^ SDL_ltoa;
	u64 -> (i8)^ -> i32 -> (i8)^ SDL_ultoa;
	Sint64 -> (i8)^ -> i32 -> (i8)^ SDL_lltoa;
	Uint64 -> (i8)^ -> i32 -> (i8)^ SDL_ulltoa;
	(i8)^ -> i32 SDL_atoi;
	(i8)^ -> f64 SDL_atof;
	(i8)^ -> ((i8)^)^ -> i32 -> i64 SDL_strtol;
	(i8)^ -> ((i8)^)^ -> i32 -> u64 SDL_strtoul;
	(i8)^ -> ((i8)^)^ -> i32 -> Sint64 SDL_strtoll;
	(i8)^ -> ((i8)^)^ -> i32 -> Uint64 SDL_strtoull;
	(i8)^ -> ((i8)^)^ -> f64 SDL_strtod;
	(i8)^ -> (i8)^ -> i32 SDL_strcmp;
	(i8)^ -> (i8)^ -> size_t -> i32 SDL_strncmp;
	(i8)^ -> (i8)^ -> i32 SDL_strcasecmp;
	(i8)^ -> (i8)^ -> size_t -> i32 SDL_strncasecmp;
	(i8)^ -> (i8)^ -> va_list -> i32 SDL_vsscanf;
	(i8)^ -> size_t -> (i8)^ -> va_list -> i32 SDL_vsnprintf;
	((i8)^)^ -> (i8)^ -> va_list -> i32 SDL_vasprintf;
	f64 -> f64 SDL_acos;
	f32 -> f32 SDL_acosf;
	f64 -> f64 SDL_asin;
	f32 -> f32 SDL_asinf;
	f64 -> f64 SDL_atan;
	f32 -> f32 SDL_atanf;
	f64 -> f64 -> f64 SDL_atan2;
	f32 -> f32 -> f32 SDL_atan2f;
	f64 -> f64 SDL_ceil;
	f32 -> f32 SDL_ceilf;
	f64 -> f64 -> f64 SDL_copysign;
	f32 -> f32 -> f32 SDL_copysignf;
	f64 -> f64 SDL_cos;
	f32 -> f32 SDL_cosf;
	f64 -> f64 SDL_exp;
	f32 -> f32 SDL_expf;
	f64 -> f64 SDL_fabs;
	f32 -> f32 SDL_fabsf;
	f64 -> f64 SDL_floor;
	f32 -> f32 SDL_floorf;
	f64 -> f64 SDL_trunc;
	f32 -> f32 SDL_truncf;
	f64 -> f64 -> f64 SDL_fmod;
	f32 -> f32 -> f32 SDL_fmodf;
	f64 -> f64 SDL_log;
	f32 -> f32 SDL_logf;
	f64 -> f64 SDL_log10;
	f32 -> f32 SDL_log10f;
	f64 -> f64 -> f64 SDL_pow;
	f32 -> f32 -> f32 SDL_powf;
	f64 -> f64 SDL_round;
	f32 -> f32 SDL_roundf;
	f64 -> i64 SDL_lround;
	f32 -> i64 SDL_lroundf;
	f64 -> i32 -> f64 SDL_scalbn;
	f32 -> i32 -> f32 SDL_scalbnf;
	f64 -> f64 SDL_sin;
	f32 -> f32 SDL_sinf;
	f64 -> f64 SDL_sqrt;
	f32 -> f32 SDL_sqrtf;
	f64 -> f64 SDL_tan;
	f32 -> f32 SDL_tanf;
	alias SDL_iconv_t = (struct {u8^ empty;})^;
	(i8)^ -> (i8)^ -> SDL_iconv_t SDL_iconv_open;
	SDL_iconv_t -> i32 SDL_iconv_close;
	SDL_iconv_t -> ((i8)^)^ -> (size_t)^ -> ((i8)^)^ -> (size_t)^ -> size_t SDL_iconv;
	(i8)^ -> (i8)^ -> (i8)^ -> size_t -> (i8)^ SDL_iconv_string;
	alias SDL_main_func = [u8];
	i32 -> ((i8)^)^ -> i32 SDL_main;
	u8 SDL_SetMainReady;
	type SDL_AssertState = enum {INK_ENUM_EXTERN2};
	type SDL_AssertData = struct {u8^ empty;};
	(SDL_AssertData)^ -> (i8)^ -> (i8)^ -> i32 -> SDL_AssertState SDL_ReportAssertion;
	alias SDL_AssertionHandler = [u8];
	SDL_AssertionHandler -> (u8)^ -> u8 SDL_SetAssertionHandler;
	SDL_AssertionHandler SDL_GetDefaultAssertionHandler;
	((u8)^)^ -> SDL_AssertionHandler SDL_GetAssertionHandler;
	(SDL_AssertData)^ SDL_GetAssertionReport;
	u8 SDL_ResetAssertionReport;
	alias SDL_SpinLock = i32;
	(SDL_SpinLock)^ -> SDL_bool SDL_AtomicTryLock;
	(SDL_SpinLock)^ -> u8 SDL_AtomicLock;
	(SDL_SpinLock)^ -> u8 SDL_AtomicUnlock;
	u8 SDL_MemoryBarrierReleaseFunction;
	u8 SDL_MemoryBarrierAcquireFunction;
	type SDL_atomic_t = struct {i32 value;};
	(SDL_atomic_t)^ -> i32 -> i32 -> SDL_bool SDL_AtomicCAS;
	(SDL_atomic_t)^ -> i32 -> i32 SDL_AtomicSet;
	(SDL_atomic_t)^ -> i32 SDL_AtomicGet;
	(SDL_atomic_t)^ -> i32 -> i32 SDL_AtomicAdd;
	((u8)^)^ -> (u8)^ -> (u8)^ -> SDL_bool SDL_AtomicCASPtr;
	((u8)^)^ -> (u8)^ -> (u8)^ SDL_AtomicSetPtr;
	((u8)^)^ -> (u8)^ SDL_AtomicGetPtr;
	(i8)^ SDL_GetError;
	(i8)^ -> i32 -> (i8)^ SDL_GetErrorMsg;
	u8 SDL_ClearError;
	type SDL_errorcode = enum {INK_ENUM_EXTERN3};
	SDL_errorcode -> i32 SDL_Error;
	type SDL_mutex = struct {u8^ empty;};
	(SDL_mutex)^ SDL_CreateMutex;
	(SDL_mutex)^ -> i32 SDL_LockMutex;
	(SDL_mutex)^ -> i32 SDL_TryLockMutex;
	(SDL_mutex)^ -> i32 SDL_UnlockMutex;
	(SDL_mutex)^ -> u8 SDL_DestroyMutex;
	type SDL_sem = struct {u8^ empty;};
	Uint32 -> (SDL_sem)^ SDL_CreateSemaphore;
	(SDL_sem)^ -> u8 SDL_DestroySemaphore;
	(SDL_sem)^ -> i32 SDL_SemWait;
	(SDL_sem)^ -> i32 SDL_SemTryWait;
	(SDL_sem)^ -> Uint32 -> i32 SDL_SemWaitTimeout;
	(SDL_sem)^ -> i32 SDL_SemPost;
	(SDL_sem)^ -> Uint32 SDL_SemValue;
	type SDL_cond = struct {u8^ empty;};
	(SDL_cond)^ SDL_CreateCond;
	(SDL_cond)^ -> u8 SDL_DestroyCond;
	(SDL_cond)^ -> i32 SDL_CondSignal;
	(SDL_cond)^ -> i32 SDL_CondBroadcast;
	(SDL_cond)^ -> (SDL_mutex)^ -> i32 SDL_CondWait;
	(SDL_cond)^ -> (SDL_mutex)^ -> Uint32 -> i32 SDL_CondWaitTimeout;
	type SDL_Thread = struct {u8^ empty;};
	alias SDL_threadID = u64;
	alias SDL_TLSID = u32;
	type SDL_ThreadPriority = enum {INK_ENUM_EXTERN4};
	alias SDL_ThreadFunction = [u8];
	SDL_ThreadFunction -> (i8)^ -> (u8)^ -> (SDL_Thread)^ SDL_CreateThread;
	SDL_ThreadFunction -> (i8)^ -> size_t -> (u8)^ -> (SDL_Thread)^ SDL_CreateThreadWithStackSize;
	(SDL_Thread)^ -> (i8)^ SDL_GetThreadName;
	SDL_threadID SDL_ThreadID;
	(SDL_Thread)^ -> SDL_threadID SDL_GetThreadID;
	SDL_ThreadPriority -> i32 SDL_SetThreadPriority;
	(SDL_Thread)^ -> (i32)^ -> u8 SDL_WaitThread;
	(SDL_Thread)^ -> u8 SDL_DetachThread;
	SDL_TLSID SDL_TLSCreate;
	SDL_TLSID -> (u8)^ SDL_TLSGet;
	SDL_TLSID -> (u8)^ -> [u8] -> i32 SDL_TLSSet;
	u8 SDL_TLSCleanup;
	type SDL_RWops = struct {u8^ empty;};
	(i8)^ -> (i8)^ -> (SDL_RWops)^ SDL_RWFromFile;
	(FILE)^ -> SDL_bool -> (SDL_RWops)^ SDL_RWFromFP;
	(u8)^ -> i32 -> (SDL_RWops)^ SDL_RWFromMem;
	(u8)^ -> i32 -> (SDL_RWops)^ SDL_RWFromConstMem;
	(SDL_RWops)^ SDL_AllocRW;
	(SDL_RWops)^ -> u8 SDL_FreeRW;
	(SDL_RWops)^ -> Sint64 SDL_RWsize;
	(SDL_RWops)^ -> Sint64 -> i32 -> Sint64 SDL_RWseek;
	(SDL_RWops)^ -> Sint64 SDL_RWtell;
	(SDL_RWops)^ -> (u8)^ -> size_t -> size_t -> size_t SDL_RWread;
	(SDL_RWops)^ -> (u8)^ -> size_t -> size_t -> size_t SDL_RWwrite;
	(SDL_RWops)^ -> i32 SDL_RWclose;
	(SDL_RWops)^ -> (size_t)^ -> i32 -> (u8)^ SDL_LoadFile_RW;
	(i8)^ -> (size_t)^ -> (u8)^ SDL_LoadFile;
	(SDL_RWops)^ -> Uint8 SDL_ReadU8;
	(SDL_RWops)^ -> Uint16 SDL_ReadLE16;
	(SDL_RWops)^ -> Uint16 SDL_ReadBE16;
	(SDL_RWops)^ -> Uint32 SDL_ReadLE32;
	(SDL_RWops)^ -> Uint32 SDL_ReadBE32;
	(SDL_RWops)^ -> Uint64 SDL_ReadLE64;
	(SDL_RWops)^ -> Uint64 SDL_ReadBE64;
	(SDL_RWops)^ -> Uint8 -> size_t SDL_WriteU8;
	(SDL_RWops)^ -> Uint16 -> size_t SDL_WriteLE16;
	(SDL_RWops)^ -> Uint16 -> size_t SDL_WriteBE16;
	(SDL_RWops)^ -> Uint32 -> size_t SDL_WriteLE32;
	(SDL_RWops)^ -> Uint32 -> size_t SDL_WriteBE32;
	(SDL_RWops)^ -> Uint64 -> size_t SDL_WriteLE64;
	(SDL_RWops)^ -> Uint64 -> size_t SDL_WriteBE64;
	alias SDL_AudioFormat = Uint16;
	alias SDL_AudioCallback = [u8];
	type SDL_AudioSpec = struct {u8^ empty;};
	alias SDL_AudioFilter = [u8];
	type SDL_AudioCVT = struct {u8^ empty;};
	i32 SDL_GetNumAudioDrivers;
	i32 -> (i8)^ SDL_GetAudioDriver;
	(i8)^ -> i32 SDL_AudioInit;
	u8 SDL_AudioQuit;
	(i8)^ SDL_GetCurrentAudioDriver;
	(SDL_AudioSpec)^ -> (SDL_AudioSpec)^ -> i32 SDL_OpenAudio;
	alias SDL_AudioDeviceID = Uint32;
	i32 -> i32 SDL_GetNumAudioDevices;
	i32 -> i32 -> (i8)^ SDL_GetAudioDeviceName;
	i32 -> i32 -> (SDL_AudioSpec)^ -> i32 SDL_GetAudioDeviceSpec;
	((i8)^)^ -> (SDL_AudioSpec)^ -> i32 -> i32 SDL_GetDefaultAudioInfo;
	(i8)^ -> i32 -> (SDL_AudioSpec)^ -> (SDL_AudioSpec)^ -> i32 -> SDL_AudioDeviceID SDL_OpenAudioDevice;
	type SDL_AudioStatus = enum {INK_ENUM_EXTERN5};
	SDL_AudioStatus SDL_GetAudioStatus;
	SDL_AudioDeviceID -> SDL_AudioStatus SDL_GetAudioDeviceStatus;
	i32 -> u8 SDL_PauseAudio;
	SDL_AudioDeviceID -> i32 -> u8 SDL_PauseAudioDevice;
	(SDL_RWops)^ -> i32 -> (SDL_AudioSpec)^ -> ((Uint8)^)^ -> (Uint32)^ -> (SDL_AudioSpec)^ SDL_LoadWAV_RW;
	(Uint8)^ -> u8 SDL_FreeWAV;
	(SDL_AudioCVT)^ -> SDL_AudioFormat -> Uint8 -> i32 -> SDL_AudioFormat -> Uint8 -> i32 -> i32 SDL_BuildAudioCVT;
	(SDL_AudioCVT)^ -> i32 SDL_ConvertAudio;
	type SDL_AudioStream = struct {u8^ empty;};
	SDL_AudioFormat -> Uint8 -> i32 -> SDL_AudioFormat -> Uint8 -> i32 -> (SDL_AudioStream)^ SDL_NewAudioStream;
	(SDL_AudioStream)^ -> (u8)^ -> i32 -> i32 SDL_AudioStreamPut;
	(SDL_AudioStream)^ -> (u8)^ -> i32 -> i32 SDL_AudioStreamGet;
	(SDL_AudioStream)^ -> i32 SDL_AudioStreamAvailable;
	(SDL_AudioStream)^ -> i32 SDL_AudioStreamFlush;
	(SDL_AudioStream)^ -> u8 SDL_AudioStreamClear;
	(SDL_AudioStream)^ -> u8 SDL_FreeAudioStream;
	(Uint8)^ -> (Uint8)^ -> Uint32 -> i32 -> u8 SDL_MixAudio;
	(Uint8)^ -> (Uint8)^ -> SDL_AudioFormat -> Uint32 -> i32 -> u8 SDL_MixAudioFormat;
	SDL_AudioDeviceID -> (u8)^ -> Uint32 -> i32 SDL_QueueAudio;
	SDL_AudioDeviceID -> (u8)^ -> Uint32 -> Uint32 SDL_DequeueAudio;
	SDL_AudioDeviceID -> Uint32 SDL_GetQueuedAudioSize;
	SDL_AudioDeviceID -> u8 SDL_ClearQueuedAudio;
	u8 SDL_LockAudio;
	SDL_AudioDeviceID -> u8 SDL_LockAudioDevice;
	u8 SDL_UnlockAudio;
	SDL_AudioDeviceID -> u8 SDL_UnlockAudioDevice;
	u8 SDL_CloseAudio;
	SDL_AudioDeviceID -> u8 SDL_CloseAudioDevice;
	(i8)^ -> i32 SDL_SetClipboardText;
	(i8)^ SDL_GetClipboardText;
	SDL_bool SDL_HasClipboardText;
	(i8)^ -> i32 SDL_SetPrimarySelectionText;
	(i8)^ SDL_GetPrimarySelectionText;
	SDL_bool SDL_HasPrimarySelectionText;
	type _CMPCCX_ENUM = enum {INK_ENUM_EXTERN6};
	u8 _mm_sfence;
	u32 _mm_getcsr;
	u32 -> u8 _mm_setcsr;
	(u8)^ -> u8 _mm_clflush;
	u8 _mm_lfence;
	u8 _mm_mfence;
	u8 _mm_pause;
	alias __mmask8 = u8;
	alias __mmask16 = u16;
	type _MM_CMPINT_ENUM = enum {INK_ENUM_EXTERN7};
	type _MM_PERM_ENUM = enum {INK_ENUM_EXTERN8};
	type _MM_MANTISSA_NORM_ENUM = enum {INK_ENUM_EXTERN9};
	type _MM_MANTISSA_SIGN_ENUM = enum {INK_ENUM_EXTERN10};
	type _MM_TERNLOG_ENUM = enum {INK_ENUM_EXTERN11};
	alias __mmask32 = u32;
	alias __mmask64 = u64;
	alias __bfloat16 = f32;
	type __tile1024i = struct {u8^ empty;};
	i32 SDL_GetCPUCount;
	i32 SDL_GetCPUCacheLineSize;
	SDL_bool SDL_HasRDTSC;
	SDL_bool SDL_HasAltiVec;
	SDL_bool SDL_HasMMX;
	SDL_bool SDL_Has3DNow;
	SDL_bool SDL_HasSSE;
	SDL_bool SDL_HasSSE2;
	SDL_bool SDL_HasSSE3;
	SDL_bool SDL_HasSSE41;
	SDL_bool SDL_HasSSE42;
	SDL_bool SDL_HasAVX;
	SDL_bool SDL_HasAVX2;
	SDL_bool SDL_HasAVX512F;
	SDL_bool SDL_HasARMSIMD;
	SDL_bool SDL_HasNEON;
	SDL_bool SDL_HasLSX;
	SDL_bool SDL_HasLASX;
	i32 SDL_GetSystemRAM;
	size_t SDL_SIMDGetAlignment;
	size_t -> (u8)^ SDL_SIMDAlloc;
	(u8)^ -> size_t -> (u8)^ SDL_SIMDRealloc;
	(u8)^ -> u8 SDL_SIMDFree;
	type SDL_PixelType = enum {INK_ENUM_EXTERN12};
	type SDL_BitmapOrder = enum {INK_ENUM_EXTERN13};
	type SDL_PackedOrder = enum {INK_ENUM_EXTERN14};
	type SDL_ArrayOrder = enum {INK_ENUM_EXTERN15};
	type SDL_PackedLayout = enum {INK_ENUM_EXTERN16};
	type SDL_PixelFormatEnum = enum {INK_ENUM_EXTERN17};
	type SDL_Color = struct {u8^ empty;};
	type SDL_Palette = struct {u8^ empty;};
	type SDL_PixelFormat = struct {u8^ empty;};
	Uint32 -> (i8)^ SDL_GetPixelFormatName;
	Uint32 -> (i32)^ -> (Uint32)^ -> (Uint32)^ -> (Uint32)^ -> (Uint32)^ -> SDL_bool SDL_PixelFormatEnumToMasks;
	i32 -> Uint32 -> Uint32 -> Uint32 -> Uint32 -> Uint32 SDL_MasksToPixelFormatEnum;
	Uint32 -> (SDL_PixelFormat)^ SDL_AllocFormat;
	(SDL_PixelFormat)^ -> u8 SDL_FreeFormat;
	i32 -> (SDL_Palette)^ SDL_AllocPalette;
	(SDL_PixelFormat)^ -> (SDL_Palette)^ -> i32 SDL_SetPixelFormatPalette;
	(SDL_Palette)^ -> (SDL_Color)^ -> i32 -> i32 -> i32 SDL_SetPaletteColors;
	(SDL_Palette)^ -> u8 SDL_FreePalette;
	(SDL_PixelFormat)^ -> Uint8 -> Uint8 -> Uint8 -> Uint32 SDL_MapRGB;
	(SDL_PixelFormat)^ -> Uint8 -> Uint8 -> Uint8 -> Uint8 -> Uint32 SDL_MapRGBA;
	Uint32 -> (SDL_PixelFormat)^ -> (Uint8)^ -> (Uint8)^ -> (Uint8)^ -> u8 SDL_GetRGB;
	Uint32 -> (SDL_PixelFormat)^ -> (Uint8)^ -> (Uint8)^ -> (Uint8)^ -> (Uint8)^ -> u8 SDL_GetRGBA;
	f32 -> (Uint16)^ -> u8 SDL_CalculateGammaRamp;
	type SDL_Point = struct {u8^ empty;};
	type SDL_FPoint = struct {u8^ empty;};
	type SDL_Rect = struct {u8^ empty;};
	type SDL_FRect = struct {u8^ empty;};
	(SDL_Rect)^ -> (SDL_Rect)^ -> SDL_bool SDL_HasIntersection;
	(SDL_Rect)^ -> (SDL_Rect)^ -> (SDL_Rect)^ -> SDL_bool SDL_IntersectRect;
	(SDL_Rect)^ -> (SDL_Rect)^ -> (SDL_Rect)^ -> u8 SDL_UnionRect;
	(SDL_Point)^ -> i32 -> (SDL_Rect)^ -> (SDL_Rect)^ -> SDL_bool SDL_EnclosePoints;
	(SDL_Rect)^ -> (i32)^ -> (i32)^ -> (i32)^ -> (i32)^ -> SDL_bool SDL_IntersectRectAndLine;
	(SDL_FRect)^ -> (SDL_FRect)^ -> SDL_bool SDL_HasIntersectionF;
	(SDL_FRect)^ -> (SDL_FRect)^ -> (SDL_FRect)^ -> SDL_bool SDL_IntersectFRect;
	(SDL_FRect)^ -> (SDL_FRect)^ -> (SDL_FRect)^ -> u8 SDL_UnionFRect;
	(SDL_FPoint)^ -> i32 -> (SDL_FRect)^ -> (SDL_FRect)^ -> SDL_bool SDL_EncloseFPoints;
	(SDL_FRect)^ -> (f32)^ -> (f32)^ -> (f32)^ -> (f32)^ -> SDL_bool SDL_IntersectFRectAndLine;
	type SDL_BlendMode = enum {INK_ENUM_EXTERN18};
	type SDL_BlendOperation = enum {INK_ENUM_EXTERN19};
	type SDL_BlendFactor = enum {INK_ENUM_EXTERN20};
	SDL_BlendFactor -> SDL_BlendFactor -> SDL_BlendOperation -> SDL_BlendFactor -> SDL_BlendFactor -> SDL_BlendOperation -> SDL_BlendMode SDL_ComposeCustomBlendMode;
	type SDL_BlitMap = struct {u8^ empty;};
	type SDL_Surface = struct {u8^ empty;};
	alias SDL_blit = [u8];
	type SDL_YUV_CONVERSION_MODE = enum {INK_ENUM_EXTERN21};
	Uint32 -> i32 -> i32 -> i32 -> Uint32 -> Uint32 -> Uint32 -> Uint32 -> (SDL_Surface)^ SDL_CreateRGBSurface;
	Uint32 -> i32 -> i32 -> i32 -> Uint32 -> (SDL_Surface)^ SDL_CreateRGBSurfaceWithFormat;
	(u8)^ -> i32 -> i32 -> i32 -> i32 -> Uint32 -> Uint32 -> Uint32 -> Uint32 -> (SDL_Surface)^ SDL_CreateRGBSurfaceFrom;
	(u8)^ -> i32 -> i32 -> i32 -> i32 -> Uint32 -> (SDL_Surface)^ SDL_CreateRGBSurfaceWithFormatFrom;
	(SDL_Surface)^ -> u8 SDL_FreeSurface;
	(SDL_Surface)^ -> (SDL_Palette)^ -> i32 SDL_SetSurfacePalette;
	(SDL_Surface)^ -> i32 SDL_LockSurface;
	(SDL_Surface)^ -> u8 SDL_UnlockSurface;
	(SDL_RWops)^ -> i32 -> (SDL_Surface)^ SDL_LoadBMP_RW;
	(SDL_Surface)^ -> (SDL_RWops)^ -> i32 -> i32 SDL_SaveBMP_RW;
	(SDL_Surface)^ -> i32 -> i32 SDL_SetSurfaceRLE;
	(SDL_Surface)^ -> SDL_bool SDL_HasSurfaceRLE;
	(SDL_Surface)^ -> i32 -> Uint32 -> i32 SDL_SetColorKey;
	(SDL_Surface)^ -> SDL_bool SDL_HasColorKey;
	(SDL_Surface)^ -> (Uint32)^ -> i32 SDL_GetColorKey;
	(SDL_Surface)^ -> Uint8 -> Uint8 -> Uint8 -> i32 SDL_SetSurfaceColorMod;
	(SDL_Surface)^ -> (Uint8)^ -> (Uint8)^ -> (Uint8)^ -> i32 SDL_GetSurfaceColorMod;
	(SDL_Surface)^ -> Uint8 -> i32 SDL_SetSurfaceAlphaMod;
	(SDL_Surface)^ -> (Uint8)^ -> i32 SDL_GetSurfaceAlphaMod;
	(SDL_Surface)^ -> SDL_BlendMode -> i32 SDL_SetSurfaceBlendMode;
	(SDL_Surface)^ -> (SDL_BlendMode)^ -> i32 SDL_GetSurfaceBlendMode;
	(SDL_Surface)^ -> (SDL_Rect)^ -> SDL_bool SDL_SetClipRect;
	(SDL_Surface)^ -> (SDL_Rect)^ -> u8 SDL_GetClipRect;
	(SDL_Surface)^ -> (SDL_Surface)^ SDL_DuplicateSurface;
	(SDL_Surface)^ -> (SDL_PixelFormat)^ -> Uint32 -> (SDL_Surface)^ SDL_ConvertSurface;
	(SDL_Surface)^ -> Uint32 -> Uint32 -> (SDL_Surface)^ SDL_ConvertSurfaceFormat;
	i32 -> i32 -> Uint32 -> (u8)^ -> i32 -> Uint32 -> (u8)^ -> i32 -> i32 SDL_ConvertPixels;
	i32 -> i32 -> Uint32 -> (u8)^ -> i32 -> Uint32 -> (u8)^ -> i32 -> i32 SDL_PremultiplyAlpha;
	(SDL_Surface)^ -> (SDL_Rect)^ -> Uint32 -> i32 SDL_FillRect;
	(SDL_Surface)^ -> (SDL_Rect)^ -> i32 -> Uint32 -> i32 SDL_FillRects;
	(SDL_Surface)^ -> (SDL_Rect)^ -> (SDL_Surface)^ -> (SDL_Rect)^ -> i32 SDL_UpperBlit;
	(SDL_Surface)^ -> (SDL_Rect)^ -> (SDL_Surface)^ -> (SDL_Rect)^ -> i32 SDL_LowerBlit;
	(SDL_Surface)^ -> (SDL_Rect)^ -> (SDL_Surface)^ -> (SDL_Rect)^ -> i32 SDL_SoftStretch;
	(SDL_Surface)^ -> (SDL_Rect)^ -> (SDL_Surface)^ -> (SDL_Rect)^ -> i32 SDL_SoftStretchLinear;
	(SDL_Surface)^ -> (SDL_Rect)^ -> (SDL_Surface)^ -> (SDL_Rect)^ -> i32 SDL_UpperBlitScaled;
	(SDL_Surface)^ -> (SDL_Rect)^ -> (SDL_Surface)^ -> (SDL_Rect)^ -> i32 SDL_LowerBlitScaled;
	SDL_YUV_CONVERSION_MODE -> u8 SDL_SetYUVConversionMode;
	SDL_YUV_CONVERSION_MODE SDL_GetYUVConversionMode;
	i32 -> i32 -> SDL_YUV_CONVERSION_MODE SDL_GetYUVConversionModeForResolution;
	type SDL_DisplayMode = struct {Uint32 format;i32 w;i32 h;i32 refresh_rate;(u8)^ driverdata;};
	type SDL_Window = struct {u8^ empty;};
	type SDL_WindowFlags = enum {INK_ENUM_EXTERN22};
	type SDL_WindowEventID = enum {INK_ENUM_EXTERN23};
	type SDL_DisplayEventID = enum {INK_ENUM_EXTERN24};
	type SDL_DisplayOrientation = enum {INK_ENUM_EXTERN25};
	type SDL_FlashOperation = enum {INK_ENUM_EXTERN26};
	alias SDL_GLContext = (u8)^;
	type SDL_GLattr = enum {INK_ENUM_EXTERN27};
	type SDL_GLprofile = enum {INK_ENUM_EXTERN28};
	type SDL_GLcontextFlag = enum {INK_ENUM_EXTERN29};
	type SDL_GLcontextReleaseFlag = enum {INK_ENUM_EXTERN30};
	type SDL_GLContextResetNotification = enum {INK_ENUM_EXTERN31};
	i32 SDL_GetNumVideoDrivers;
	i32 -> (i8)^ SDL_GetVideoDriver;
	(i8)^ -> i32 SDL_VideoInit;
	u8 SDL_VideoQuit;
	(i8)^ SDL_GetCurrentVideoDriver;
	i32 SDL_GetNumVideoDisplays;
	i32 -> (i8)^ SDL_GetDisplayName;
	i32 -> (SDL_Rect)^ -> i32 SDL_GetDisplayBounds;
	i32 -> (SDL_Rect)^ -> i32 SDL_GetDisplayUsableBounds;
	i32 -> (f32)^ -> (f32)^ -> (f32)^ -> i32 SDL_GetDisplayDPI;
	i32 -> SDL_DisplayOrientation SDL_GetDisplayOrientation;
	i32 -> i32 SDL_GetNumDisplayModes;
	i32 -> i32 -> (SDL_DisplayMode)^ -> i32 SDL_GetDisplayMode;
	i32 -> (SDL_DisplayMode)^ -> i32 SDL_GetDesktopDisplayMode;
	i32 -> (SDL_DisplayMode)^ -> i32 SDL_GetCurrentDisplayMode;
	i32 -> (SDL_DisplayMode)^ -> (SDL_DisplayMode)^ -> (SDL_DisplayMode)^ SDL_GetClosestDisplayMode;
	(SDL_Point)^ -> i32 SDL_GetPointDisplayIndex;
	(SDL_Rect)^ -> i32 SDL_GetRectDisplayIndex;
	(SDL_Window)^ -> i32 SDL_GetWindowDisplayIndex;
	(SDL_Window)^ -> (SDL_DisplayMode)^ -> i32 SDL_SetWindowDisplayMode;
	(SDL_Window)^ -> (SDL_DisplayMode)^ -> i32 SDL_GetWindowDisplayMode;
	(SDL_Window)^ -> (size_t)^ -> (u8)^ SDL_GetWindowICCProfile;
	(SDL_Window)^ -> Uint32 SDL_GetWindowPixelFormat;
	(i8)^ -> i32 -> i32 -> i32 -> i32 -> Uint32 -> (SDL_Window)^ SDL_CreateWindow;
	(u8)^ -> (SDL_Window)^ SDL_CreateWindowFrom;
	(SDL_Window)^ -> Uint32 SDL_GetWindowID;
	Uint32 -> (SDL_Window)^ SDL_GetWindowFromID;
	(SDL_Window)^ -> Uint32 SDL_GetWindowFlags;
	(SDL_Window)^ -> (i8)^ -> u8 SDL_SetWindowTitle;
	(SDL_Window)^ -> (i8)^ SDL_GetWindowTitle;
	(SDL_Window)^ -> (SDL_Surface)^ -> u8 SDL_SetWindowIcon;
	(SDL_Window)^ -> (i8)^ -> (u8)^ -> (u8)^ SDL_SetWindowData;
	(SDL_Window)^ -> (i8)^ -> (u8)^ SDL_GetWindowData;
	(SDL_Window)^ -> i32 -> i32 -> u8 SDL_SetWindowPosition;
	(SDL_Window)^ -> (i32)^ -> (i32)^ -> u8 SDL_GetWindowPosition;
	(SDL_Window)^ -> i32 -> i32 -> u8 SDL_SetWindowSize;
	(SDL_Window)^ -> (i32)^ -> (i32)^ -> u8 SDL_GetWindowSize;
	(SDL_Window)^ -> (i32)^ -> (i32)^ -> (i32)^ -> (i32)^ -> i32 SDL_GetWindowBordersSize;
	(SDL_Window)^ -> (i32)^ -> (i32)^ -> u8 SDL_GetWindowSizeInPixels;
	(SDL_Window)^ -> i32 -> i32 -> u8 SDL_SetWindowMinimumSize;
	(SDL_Window)^ -> (i32)^ -> (i32)^ -> u8 SDL_GetWindowMinimumSize;
	(SDL_Window)^ -> i32 -> i32 -> u8 SDL_SetWindowMaximumSize;
	(SDL_Window)^ -> (i32)^ -> (i32)^ -> u8 SDL_GetWindowMaximumSize;
	(SDL_Window)^ -> SDL_bool -> u8 SDL_SetWindowBordered;
	(SDL_Window)^ -> SDL_bool -> u8 SDL_SetWindowResizable;
	(SDL_Window)^ -> SDL_bool -> u8 SDL_SetWindowAlwaysOnTop;
	(SDL_Window)^ -> u8 SDL_ShowWindow;
	(SDL_Window)^ -> u8 SDL_HideWindow;
	(SDL_Window)^ -> u8 SDL_RaiseWindow;
	(SDL_Window)^ -> u8 SDL_MaximizeWindow;
	(SDL_Window)^ -> u8 SDL_MinimizeWindow;
	(SDL_Window)^ -> u8 SDL_RestoreWindow;
	(SDL_Window)^ -> Uint32 -> i32 SDL_SetWindowFullscreen;
	(SDL_Window)^ -> (SDL_Surface)^ SDL_GetWindowSurface;
	(SDL_Window)^ -> i32 SDL_UpdateWindowSurface;
	(SDL_Window)^ -> (SDL_Rect)^ -> i32 -> i32 SDL_UpdateWindowSurfaceRects;
	(SDL_Window)^ -> SDL_bool -> u8 SDL_SetWindowGrab;
	(SDL_Window)^ -> SDL_bool -> u8 SDL_SetWindowKeyboardGrab;
	(SDL_Window)^ -> SDL_bool -> u8 SDL_SetWindowMouseGrab;
	(SDL_Window)^ -> SDL_bool SDL_GetWindowGrab;
	(SDL_Window)^ -> SDL_bool SDL_GetWindowKeyboardGrab;
	(SDL_Window)^ -> SDL_bool SDL_GetWindowMouseGrab;
	(SDL_Window)^ SDL_GetGrabbedWindow;
	(SDL_Window)^ -> (SDL_Rect)^ -> i32 SDL_SetWindowMouseRect;
	(SDL_Window)^ -> (SDL_Rect)^ SDL_GetWindowMouseRect;
	(SDL_Window)^ -> f32 -> i32 SDL_SetWindowBrightness;
	(SDL_Window)^ -> f32 SDL_GetWindowBrightness;
	(SDL_Window)^ -> f32 -> i32 SDL_SetWindowOpacity;
	(SDL_Window)^ -> (f32)^ -> i32 SDL_GetWindowOpacity;
	(SDL_Window)^ -> (SDL_Window)^ -> i32 SDL_SetWindowModalFor;
	(SDL_Window)^ -> i32 SDL_SetWindowInputFocus;
	(SDL_Window)^ -> (Uint16)^ -> (Uint16)^ -> (Uint16)^ -> i32 SDL_SetWindowGammaRamp;
	(SDL_Window)^ -> (Uint16)^ -> (Uint16)^ -> (Uint16)^ -> i32 SDL_GetWindowGammaRamp;
	type SDL_HitTestResult = enum {INK_ENUM_EXTERN32};
	alias SDL_HitTest = [u8];
	(SDL_Window)^ -> SDL_HitTest -> (u8)^ -> i32 SDL_SetWindowHitTest;
	(SDL_Window)^ -> SDL_FlashOperation -> i32 SDL_FlashWindow;
	(SDL_Window)^ -> u8 SDL_DestroyWindow;
	SDL_bool SDL_IsScreenSaverEnabled;
	u8 SDL_EnableScreenSaver;
	u8 SDL_DisableScreenSaver;
	(i8)^ -> i32 SDL_GL_LoadLibrary;
	(i8)^ -> (u8)^ SDL_GL_GetProcAddress;
	u8 SDL_GL_UnloadLibrary;
	(i8)^ -> SDL_bool SDL_GL_ExtensionSupported;
	u8 SDL_GL_ResetAttributes;
	SDL_GLattr -> i32 -> i32 SDL_GL_SetAttribute;
	SDL_GLattr -> (i32)^ -> i32 SDL_GL_GetAttribute;
	(SDL_Window)^ -> SDL_GLContext SDL_GL_CreateContext;
	(SDL_Window)^ -> SDL_GLContext -> i32 SDL_GL_MakeCurrent;
	(SDL_Window)^ SDL_GL_GetCurrentWindow;
	SDL_GLContext SDL_GL_GetCurrentContext;
	(SDL_Window)^ -> (i32)^ -> (i32)^ -> u8 SDL_GL_GetDrawableSize;
	i32 -> i32 SDL_GL_SetSwapInterval;
	i32 SDL_GL_GetSwapInterval;
	(SDL_Window)^ -> u8 SDL_GL_SwapWindow;
	SDL_GLContext -> u8 SDL_GL_DeleteContext;
	type SDL_Scancode = enum {INK_ENUM_EXTERN33};
	alias SDL_Keycode = Sint32;
	type SDL_KeyCode = enum {INK_ENUM_EXTERN34};
	type SDL_Keymod = enum {INK_ENUM_EXTERN35};
	type SDL_Keysym = struct {u8^ empty;};
	(SDL_Window)^ SDL_GetKeyboardFocus;
	(i32)^ -> (Uint8)^ SDL_GetKeyboardState;
	u8 SDL_ResetKeyboard;
	SDL_Keymod SDL_GetModState;
	SDL_Keymod -> u8 SDL_SetModState;
	SDL_Scancode -> SDL_Keycode SDL_GetKeyFromScancode;
	SDL_Keycode -> SDL_Scancode SDL_GetScancodeFromKey;
	SDL_Scancode -> (i8)^ SDL_GetScancodeName;
	(i8)^ -> SDL_Scancode SDL_GetScancodeFromName;
	SDL_Keycode -> (i8)^ SDL_GetKeyName;
	(i8)^ -> SDL_Keycode SDL_GetKeyFromName;
	u8 SDL_StartTextInput;
	SDL_bool SDL_IsTextInputActive;
	u8 SDL_StopTextInput;
	u8 SDL_ClearComposition;
	SDL_bool SDL_IsTextInputShown;
	(SDL_Rect)^ -> u8 SDL_SetTextInputRect;
	SDL_bool SDL_HasScreenKeyboardSupport;
	(SDL_Window)^ -> SDL_bool SDL_IsScreenKeyboardShown;
	type SDL_Cursor = struct {u8^ empty;};
	type SDL_SystemCursor = enum {INK_ENUM_EXTERN36};
	type SDL_MouseWheelDirection = enum {INK_ENUM_EXTERN37};
	(SDL_Window)^ SDL_GetMouseFocus;
	(i32)^ -> (i32)^ -> Uint32 SDL_GetMouseState;
	(i32)^ -> (i32)^ -> Uint32 SDL_GetGlobalMouseState;
	(i32)^ -> (i32)^ -> Uint32 SDL_GetRelativeMouseState;
	(SDL_Window)^ -> i32 -> i32 -> u8 SDL_WarpMouseInWindow;
	i32 -> i32 -> i32 SDL_WarpMouseGlobal;
	SDL_bool -> i32 SDL_SetRelativeMouseMode;
	SDL_bool -> i32 SDL_CaptureMouse;
	SDL_bool SDL_GetRelativeMouseMode;
	(Uint8)^ -> (Uint8)^ -> i32 -> i32 -> i32 -> i32 -> (SDL_Cursor)^ SDL_CreateCursor;
	(SDL_Surface)^ -> i32 -> i32 -> (SDL_Cursor)^ SDL_CreateColorCursor;
	SDL_SystemCursor -> (SDL_Cursor)^ SDL_CreateSystemCursor;
	(SDL_Cursor)^ -> u8 SDL_SetCursor;
	(SDL_Cursor)^ SDL_GetCursor;
	(SDL_Cursor)^ SDL_GetDefaultCursor;
	(SDL_Cursor)^ -> u8 SDL_FreeCursor;
	i32 -> i32 SDL_ShowCursor;
	type SDL_GUID = struct {(Uint8)^ data;};
	SDL_GUID -> (i8)^ -> i32 -> u8 SDL_GUIDToString;
	(i8)^ -> SDL_GUID SDL_GUIDFromString;
	type SDL_Joystick = struct {u8^ empty;};
	alias SDL_JoystickGUID = SDL_GUID;
	alias SDL_JoystickID = Sint32;
	type SDL_JoystickType = enum {INK_ENUM_EXTERN38};
	type SDL_JoystickPowerLevel = enum {INK_ENUM_EXTERN39};
	u8 SDL_LockJoysticks;
	u8 SDL_UnlockJoysticks;
	i32 SDL_NumJoysticks;
	i32 -> (i8)^ SDL_JoystickNameForIndex;
	i32 -> (i8)^ SDL_JoystickPathForIndex;
	i32 -> i32 SDL_JoystickGetDevicePlayerIndex;
	i32 -> SDL_JoystickGUID SDL_JoystickGetDeviceGUID;
	i32 -> Uint16 SDL_JoystickGetDeviceVendor;
	i32 -> Uint16 SDL_JoystickGetDeviceProduct;
	i32 -> Uint16 SDL_JoystickGetDeviceProductVersion;
	i32 -> SDL_JoystickType SDL_JoystickGetDeviceType;
	i32 -> SDL_JoystickID SDL_JoystickGetDeviceInstanceID;
	i32 -> (SDL_Joystick)^ SDL_JoystickOpen;
	SDL_JoystickID -> (SDL_Joystick)^ SDL_JoystickFromInstanceID;
	i32 -> (SDL_Joystick)^ SDL_JoystickFromPlayerIndex;
	SDL_JoystickType -> i32 -> i32 -> i32 -> i32 SDL_JoystickAttachVirtual;
	type SDL_VirtualJoystickDesc = struct {u8^ empty;};
	(SDL_VirtualJoystickDesc)^ -> i32 SDL_JoystickAttachVirtualEx;
	i32 -> i32 SDL_JoystickDetachVirtual;
	i32 -> SDL_bool SDL_JoystickIsVirtual;
	(SDL_Joystick)^ -> i32 -> Sint16 -> i32 SDL_JoystickSetVirtualAxis;
	(SDL_Joystick)^ -> i32 -> Uint8 -> i32 SDL_JoystickSetVirtualButton;
	(SDL_Joystick)^ -> i32 -> Uint8 -> i32 SDL_JoystickSetVirtualHat;
	(SDL_Joystick)^ -> (i8)^ SDL_JoystickName;
	(SDL_Joystick)^ -> (i8)^ SDL_JoystickPath;
	(SDL_Joystick)^ -> i32 SDL_JoystickGetPlayerIndex;
	(SDL_Joystick)^ -> i32 -> u8 SDL_JoystickSetPlayerIndex;
	(SDL_Joystick)^ -> SDL_JoystickGUID SDL_JoystickGetGUID;
	(SDL_Joystick)^ -> Uint16 SDL_JoystickGetVendor;
	(SDL_Joystick)^ -> Uint16 SDL_JoystickGetProduct;
	(SDL_Joystick)^ -> Uint16 SDL_JoystickGetProductVersion;
	(SDL_Joystick)^ -> Uint16 SDL_JoystickGetFirmwareVersion;
	(SDL_Joystick)^ -> (i8)^ SDL_JoystickGetSerial;
	(SDL_Joystick)^ -> SDL_JoystickType SDL_JoystickGetType;
	SDL_JoystickGUID -> (i8)^ -> i32 -> u8 SDL_JoystickGetGUIDString;
	(i8)^ -> SDL_JoystickGUID SDL_JoystickGetGUIDFromString;
	SDL_JoystickGUID -> (Uint16)^ -> (Uint16)^ -> (Uint16)^ -> (Uint16)^ -> u8 SDL_GetJoystickGUIDInfo;
	(SDL_Joystick)^ -> SDL_bool SDL_JoystickGetAttached;
	(SDL_Joystick)^ -> SDL_JoystickID SDL_JoystickInstanceID;
	(SDL_Joystick)^ -> i32 SDL_JoystickNumAxes;
	(SDL_Joystick)^ -> i32 SDL_JoystickNumBalls;
	(SDL_Joystick)^ -> i32 SDL_JoystickNumHats;
	(SDL_Joystick)^ -> i32 SDL_JoystickNumButtons;
	u8 SDL_JoystickUpdate;
	i32 -> i32 SDL_JoystickEventState;
	(SDL_Joystick)^ -> i32 -> Sint16 SDL_JoystickGetAxis;
	(SDL_Joystick)^ -> i32 -> (Sint16)^ -> SDL_bool SDL_JoystickGetAxisInitialState;
	(SDL_Joystick)^ -> i32 -> Uint8 SDL_JoystickGetHat;
	(SDL_Joystick)^ -> i32 -> (i32)^ -> (i32)^ -> i32 SDL_JoystickGetBall;
	(SDL_Joystick)^ -> i32 -> Uint8 SDL_JoystickGetButton;
	(SDL_Joystick)^ -> Uint16 -> Uint16 -> Uint32 -> i32 SDL_JoystickRumble;
	(SDL_Joystick)^ -> Uint16 -> Uint16 -> Uint32 -> i32 SDL_JoystickRumbleTriggers;
	(SDL_Joystick)^ -> SDL_bool SDL_JoystickHasLED;
	(SDL_Joystick)^ -> SDL_bool SDL_JoystickHasRumble;
	(SDL_Joystick)^ -> SDL_bool SDL_JoystickHasRumbleTriggers;
	(SDL_Joystick)^ -> Uint8 -> Uint8 -> Uint8 -> i32 SDL_JoystickSetLED;
	(SDL_Joystick)^ -> (u8)^ -> i32 -> i32 SDL_JoystickSendEffect;
	(SDL_Joystick)^ -> u8 SDL_JoystickClose;
	(SDL_Joystick)^ -> SDL_JoystickPowerLevel SDL_JoystickCurrentPowerLevel;
	type SDL_Sensor = struct {u8^ empty;};
	alias SDL_SensorID = Sint32;
	type SDL_SensorType = enum {INK_ENUM_EXTERN40};
	u8 SDL_LockSensors;
	u8 SDL_UnlockSensors;
	i32 SDL_NumSensors;
	i32 -> (i8)^ SDL_SensorGetDeviceName;
	i32 -> SDL_SensorType SDL_SensorGetDeviceType;
	i32 -> i32 SDL_SensorGetDeviceNonPortableType;
	i32 -> SDL_SensorID SDL_SensorGetDeviceInstanceID;
	i32 -> (SDL_Sensor)^ SDL_SensorOpen;
	SDL_SensorID -> (SDL_Sensor)^ SDL_SensorFromInstanceID;
	(SDL_Sensor)^ -> (i8)^ SDL_SensorGetName;
	(SDL_Sensor)^ -> SDL_SensorType SDL_SensorGetType;
	(SDL_Sensor)^ -> i32 SDL_SensorGetNonPortableType;
	(SDL_Sensor)^ -> SDL_SensorID SDL_SensorGetInstanceID;
	(SDL_Sensor)^ -> (f32)^ -> i32 -> i32 SDL_SensorGetData;
	(SDL_Sensor)^ -> (Uint64)^ -> (f32)^ -> i32 -> i32 SDL_SensorGetDataWithTimestamp;
	(SDL_Sensor)^ -> u8 SDL_SensorClose;
	u8 SDL_SensorUpdate;
	type SDL_GameController = struct {u8^ empty;};
	type SDL_GameControllerType = enum {INK_ENUM_EXTERN41};
	type SDL_GameControllerBindType = enum {INK_ENUM_EXTERN42};
	type SDL_GameControllerButtonBind = struct {u8^ empty;};
	(SDL_RWops)^ -> i32 -> i32 SDL_GameControllerAddMappingsFromRW;
	(i8)^ -> i32 SDL_GameControllerAddMapping;
	i32 SDL_GameControllerNumMappings;
	i32 -> (i8)^ SDL_GameControllerMappingForIndex;
	SDL_JoystickGUID -> (i8)^ SDL_GameControllerMappingForGUID;
	(SDL_GameController)^ -> (i8)^ SDL_GameControllerMapping;
	i32 -> SDL_bool SDL_IsGameController;
	i32 -> (i8)^ SDL_GameControllerNameForIndex;
	i32 -> (i8)^ SDL_GameControllerPathForIndex;
	i32 -> SDL_GameControllerType SDL_GameControllerTypeForIndex;
	i32 -> (i8)^ SDL_GameControllerMappingForDeviceIndex;
	i32 -> (SDL_GameController)^ SDL_GameControllerOpen;
	SDL_JoystickID -> (SDL_GameController)^ SDL_GameControllerFromInstanceID;
	i32 -> (SDL_GameController)^ SDL_GameControllerFromPlayerIndex;
	(SDL_GameController)^ -> (i8)^ SDL_GameControllerName;
	(SDL_GameController)^ -> (i8)^ SDL_GameControllerPath;
	(SDL_GameController)^ -> SDL_GameControllerType SDL_GameControllerGetType;
	(SDL_GameController)^ -> i32 SDL_GameControllerGetPlayerIndex;
	(SDL_GameController)^ -> i32 -> u8 SDL_GameControllerSetPlayerIndex;
	(SDL_GameController)^ -> Uint16 SDL_GameControllerGetVendor;
	(SDL_GameController)^ -> Uint16 SDL_GameControllerGetProduct;
	(SDL_GameController)^ -> Uint16 SDL_GameControllerGetProductVersion;
	(SDL_GameController)^ -> Uint16 SDL_GameControllerGetFirmwareVersion;
	(SDL_GameController)^ -> (i8)^ SDL_GameControllerGetSerial;
	(SDL_GameController)^ -> SDL_bool SDL_GameControllerGetAttached;
	(SDL_GameController)^ -> (SDL_Joystick)^ SDL_GameControllerGetJoystick;
	i32 -> i32 SDL_GameControllerEventState;
	u8 SDL_GameControllerUpdate;
	type SDL_GameControllerAxis = enum {INK_ENUM_EXTERN43};
	(i8)^ -> SDL_GameControllerAxis SDL_GameControllerGetAxisFromString;
	SDL_GameControllerAxis -> (i8)^ SDL_GameControllerGetStringForAxis;
	(SDL_GameController)^ -> SDL_GameControllerAxis -> SDL_GameControllerButtonBind SDL_GameControllerGetBindForAxis;
	(SDL_GameController)^ -> SDL_GameControllerAxis -> SDL_bool SDL_GameControllerHasAxis;
	(SDL_GameController)^ -> SDL_GameControllerAxis -> Sint16 SDL_GameControllerGetAxis;
	type SDL_GameControllerButton = enum {INK_ENUM_EXTERN44};
	(i8)^ -> SDL_GameControllerButton SDL_GameControllerGetButtonFromString;
	SDL_GameControllerButton -> (i8)^ SDL_GameControllerGetStringForButton;
	(SDL_GameController)^ -> SDL_GameControllerButton -> SDL_GameControllerButtonBind SDL_GameControllerGetBindForButton;
	(SDL_GameController)^ -> SDL_GameControllerButton -> SDL_bool SDL_GameControllerHasButton;
	(SDL_GameController)^ -> SDL_GameControllerButton -> Uint8 SDL_GameControllerGetButton;
	(SDL_GameController)^ -> i32 SDL_GameControllerGetNumTouchpads;
	(SDL_GameController)^ -> i32 -> i32 SDL_GameControllerGetNumTouchpadFingers;
	(SDL_GameController)^ -> i32 -> i32 -> (Uint8)^ -> (f32)^ -> (f32)^ -> (f32)^ -> i32 SDL_GameControllerGetTouchpadFinger;
	(SDL_GameController)^ -> SDL_SensorType -> SDL_bool SDL_GameControllerHasSensor;
	(SDL_GameController)^ -> SDL_SensorType -> SDL_bool -> i32 SDL_GameControllerSetSensorEnabled;
	(SDL_GameController)^ -> SDL_SensorType -> SDL_bool SDL_GameControllerIsSensorEnabled;
	(SDL_GameController)^ -> SDL_SensorType -> f32 SDL_GameControllerGetSensorDataRate;
	(SDL_GameController)^ -> SDL_SensorType -> (f32)^ -> i32 -> i32 SDL_GameControllerGetSensorData;
	(SDL_GameController)^ -> SDL_SensorType -> (Uint64)^ -> (f32)^ -> i32 -> i32 SDL_GameControllerGetSensorDataWithTimestamp;
	(SDL_GameController)^ -> Uint16 -> Uint16 -> Uint32 -> i32 SDL_GameControllerRumble;
	(SDL_GameController)^ -> Uint16 -> Uint16 -> Uint32 -> i32 SDL_GameControllerRumbleTriggers;
	(SDL_GameController)^ -> SDL_bool SDL_GameControllerHasLED;
	(SDL_GameController)^ -> SDL_bool SDL_GameControllerHasRumble;
	(SDL_GameController)^ -> SDL_bool SDL_GameControllerHasRumbleTriggers;
	(SDL_GameController)^ -> Uint8 -> Uint8 -> Uint8 -> i32 SDL_GameControllerSetLED;
	(SDL_GameController)^ -> (u8)^ -> i32 -> i32 SDL_GameControllerSendEffect;
	(SDL_GameController)^ -> u8 SDL_GameControllerClose;
	(SDL_GameController)^ -> SDL_GameControllerButton -> (i8)^ SDL_GameControllerGetAppleSFSymbolsNameForButton;
	(SDL_GameController)^ -> SDL_GameControllerAxis -> (i8)^ SDL_GameControllerGetAppleSFSymbolsNameForAxis;
	alias SDL_TouchID = Sint64;
	alias SDL_FingerID = Sint64;
	type SDL_TouchDeviceType = enum {INK_ENUM_EXTERN45};
	type SDL_Finger = struct {u8^ empty;};
	i32 SDL_GetNumTouchDevices;
	i32 -> SDL_TouchID SDL_GetTouchDevice;
	i32 -> (i8)^ SDL_GetTouchName;
	SDL_TouchID -> SDL_TouchDeviceType SDL_GetTouchDeviceType;
	SDL_TouchID -> i32 SDL_GetNumTouchFingers;
	SDL_TouchID -> i32 -> (SDL_Finger)^ SDL_GetTouchFinger;
	alias SDL_GestureID = Sint64;
	SDL_TouchID -> i32 SDL_RecordGesture;
	(SDL_RWops)^ -> i32 SDL_SaveAllDollarTemplates;
	SDL_GestureID -> (SDL_RWops)^ -> i32 SDL_SaveDollarTemplate;
	SDL_TouchID -> (SDL_RWops)^ -> i32 SDL_LoadDollarTemplates;
	type SDL_EventType = enum {INK_ENUM_EXTERN46};
	type SDL_CommonEvent = struct {u8^ empty;};
	type SDL_DisplayEvent = struct {u8^ empty;};
	type SDL_WindowEvent = struct {u8^ empty;};
	type SDL_KeyboardEvent = struct {u8^ empty;};
	type SDL_TextEditingEvent = struct {u8^ empty;};
	type SDL_TextEditingExtEvent = struct {u8^ empty;};
	type SDL_TextInputEvent = struct {u8^ empty;};
	type SDL_MouseMotionEvent = struct {u8^ empty;};
	type SDL_MouseButtonEvent = struct {u8^ empty;};
	type SDL_MouseWheelEvent = struct {u8^ empty;};
	type SDL_JoyAxisEvent = struct {u8^ empty;};
	type SDL_JoyBallEvent = struct {u8^ empty;};
	type SDL_JoyHatEvent = struct {u8^ empty;};
	type SDL_JoyButtonEvent = struct {u8^ empty;};
	type SDL_JoyDeviceEvent = struct {u8^ empty;};
	type SDL_JoyBatteryEvent = struct {u8^ empty;};
	type SDL_ControllerAxisEvent = struct {u8^ empty;};
	type SDL_ControllerButtonEvent = struct {u8^ empty;};
	type SDL_ControllerDeviceEvent = struct {u8^ empty;};
	type SDL_ControllerTouchpadEvent = struct {u8^ empty;};
	type SDL_ControllerSensorEvent = struct {u8^ empty;};
	type SDL_AudioDeviceEvent = struct {u8^ empty;};
	type SDL_TouchFingerEvent = struct {u8^ empty;};
	type SDL_MultiGestureEvent = struct {u8^ empty;};
	type SDL_DollarGestureEvent = struct {u8^ empty;};
	type SDL_DropEvent = struct {u8^ empty;};
	type SDL_SensorEvent = struct {u8^ empty;};
	type SDL_QuitEvent = struct {u8^ empty;};
	type SDL_OSEvent = struct {u8^ empty;};
	type SDL_UserEvent = struct {u8^ empty;};
	type SDL_SysWMmsg = struct {u8^ empty;};
	type SDL_SysWMEvent = struct {u8^ empty;};
	type SDL_Event = union {u8^ empty;};
	u8 SDL_PumpEvents;
	type SDL_eventaction = enum {INK_ENUM_EXTERN47};
	(SDL_Event)^ -> i32 -> SDL_eventaction -> Uint32 -> Uint32 -> i32 SDL_PeepEvents;
	Uint32 -> SDL_bool SDL_HasEvent;
	Uint32 -> Uint32 -> SDL_bool SDL_HasEvents;
	Uint32 -> u8 SDL_FlushEvent;
	Uint32 -> Uint32 -> u8 SDL_FlushEvents;
	(SDL_Event)^ -> i32 SDL_PollEvent;
	(SDL_Event)^ -> i32 SDL_WaitEvent;
	(SDL_Event)^ -> i32 -> i32 SDL_WaitEventTimeout;
	(SDL_Event)^ -> i32 SDL_PushEvent;
	alias SDL_EventFilter = [u8];
	SDL_EventFilter -> (u8)^ -> u8 SDL_SetEventFilter;
	(SDL_EventFilter)^ -> ((u8)^)^ -> SDL_bool SDL_GetEventFilter;
	SDL_EventFilter -> (u8)^ -> u8 SDL_AddEventWatch;
	SDL_EventFilter -> (u8)^ -> u8 SDL_DelEventWatch;
	SDL_EventFilter -> (u8)^ -> u8 SDL_FilterEvents;
	Uint32 -> i32 -> Uint8 SDL_EventState;
	i32 -> Uint32 SDL_RegisterEvents;
	(i8)^ SDL_GetBasePath;
	(i8)^ -> (i8)^ -> (i8)^ SDL_GetPrefPath;
	type SDL_Haptic = struct {u8^ empty;};
	type SDL_HapticDirection = struct {u8^ empty;};
	type SDL_HapticConstant = struct {u8^ empty;};
	type SDL_HapticPeriodic = struct {u8^ empty;};
	type SDL_HapticCondition = struct {u8^ empty;};
	type SDL_HapticRamp = struct {u8^ empty;};
	type SDL_HapticLeftRight = struct {u8^ empty;};
	type SDL_HapticCustom = struct {u8^ empty;};
	type SDL_HapticEffect = union {u8^ empty;};
	i32 SDL_NumHaptics;
	i32 -> (i8)^ SDL_HapticName;
	i32 -> (SDL_Haptic)^ SDL_HapticOpen;
	i32 -> i32 SDL_HapticOpened;
	(SDL_Haptic)^ -> i32 SDL_HapticIndex;
	i32 SDL_MouseIsHaptic;
	(SDL_Haptic)^ SDL_HapticOpenFromMouse;
	(SDL_Joystick)^ -> i32 SDL_JoystickIsHaptic;
	(SDL_Joystick)^ -> (SDL_Haptic)^ SDL_HapticOpenFromJoystick;
	(SDL_Haptic)^ -> u8 SDL_HapticClose;
	(SDL_Haptic)^ -> i32 SDL_HapticNumEffects;
	(SDL_Haptic)^ -> i32 SDL_HapticNumEffectsPlaying;
	(SDL_Haptic)^ -> u32 SDL_HapticQuery;
	(SDL_Haptic)^ -> i32 SDL_HapticNumAxes;
	(SDL_Haptic)^ -> (SDL_HapticEffect)^ -> i32 SDL_HapticEffectSupported;
	(SDL_Haptic)^ -> (SDL_HapticEffect)^ -> i32 SDL_HapticNewEffect;
	(SDL_Haptic)^ -> i32 -> (SDL_HapticEffect)^ -> i32 SDL_HapticUpdateEffect;
	(SDL_Haptic)^ -> i32 -> Uint32 -> i32 SDL_HapticRunEffect;
	(SDL_Haptic)^ -> i32 -> i32 SDL_HapticStopEffect;
	(SDL_Haptic)^ -> i32 -> u8 SDL_HapticDestroyEffect;
	(SDL_Haptic)^ -> i32 -> i32 SDL_HapticGetEffectStatus;
	(SDL_Haptic)^ -> i32 -> i32 SDL_HapticSetGain;
	(SDL_Haptic)^ -> i32 -> i32 SDL_HapticSetAutocenter;
	(SDL_Haptic)^ -> i32 SDL_HapticPause;
	(SDL_Haptic)^ -> i32 SDL_HapticUnpause;
	(SDL_Haptic)^ -> i32 SDL_HapticStopAll;
	(SDL_Haptic)^ -> i32 SDL_HapticRumbleSupported;
	(SDL_Haptic)^ -> i32 SDL_HapticRumbleInit;
	(SDL_Haptic)^ -> f32 -> Uint32 -> i32 SDL_HapticRumblePlay;
	(SDL_Haptic)^ -> i32 SDL_HapticRumbleStop;
	type SDL_hid_device = struct {u8^ empty;};
	type SDL_hid_device_info = struct {u8^ empty;};
	i32 SDL_hid_init;
	i32 SDL_hid_exit;
	Uint32 SDL_hid_device_change_count;
	u16 -> u16 -> (SDL_hid_device_info)^ SDL_hid_enumerate;
	(SDL_hid_device_info)^ -> u8 SDL_hid_free_enumeration;
	u16 -> u16 -> (wchar_t)^ -> (SDL_hid_device)^ SDL_hid_open;
	(i8)^ -> i32 -> (SDL_hid_device)^ SDL_hid_open_path;
	(SDL_hid_device)^ -> (u8)^ -> size_t -> i32 SDL_hid_write;
	(SDL_hid_device)^ -> (u8)^ -> size_t -> i32 -> i32 SDL_hid_read_timeout;
	(SDL_hid_device)^ -> (u8)^ -> size_t -> i32 SDL_hid_read;
	(SDL_hid_device)^ -> i32 -> i32 SDL_hid_set_nonblocking;
	(SDL_hid_device)^ -> (u8)^ -> size_t -> i32 SDL_hid_send_feature_report;
	(SDL_hid_device)^ -> (u8)^ -> size_t -> i32 SDL_hid_get_feature_report;
	(SDL_hid_device)^ -> u8 SDL_hid_close;
	(SDL_hid_device)^ -> (wchar_t)^ -> size_t -> i32 SDL_hid_get_manufacturer_string;
	(SDL_hid_device)^ -> (wchar_t)^ -> size_t -> i32 SDL_hid_get_product_string;
	(SDL_hid_device)^ -> (wchar_t)^ -> size_t -> i32 SDL_hid_get_serial_number_string;
	(SDL_hid_device)^ -> i32 -> (wchar_t)^ -> size_t -> i32 SDL_hid_get_indexed_string;
	SDL_bool -> u8 SDL_hid_ble_scan;
	type SDL_HintPriority = enum {INK_ENUM_EXTERN48};
	(i8)^ -> (i8)^ -> SDL_HintPriority -> SDL_bool SDL_SetHintWithPriority;
	(i8)^ -> (i8)^ -> SDL_bool SDL_SetHint;
	(i8)^ -> SDL_bool SDL_ResetHint;
	u8 SDL_ResetHints;
	(i8)^ -> (i8)^ SDL_GetHint;
	(i8)^ -> SDL_bool -> SDL_bool SDL_GetHintBoolean;
	alias SDL_HintCallback = [u8];
	(i8)^ -> SDL_HintCallback -> (u8)^ -> u8 SDL_AddHintCallback;
	(i8)^ -> SDL_HintCallback -> (u8)^ -> u8 SDL_DelHintCallback;
	u8 SDL_ClearHints;
	(i8)^ -> (u8)^ SDL_LoadObject;
	(u8)^ -> (i8)^ -> (u8)^ SDL_LoadFunction;
	(u8)^ -> u8 SDL_UnloadObject;
	type SDL_LogCategory = enum {INK_ENUM_EXTERN49};
	type SDL_LogPriority = enum {INK_ENUM_EXTERN50};
	SDL_LogPriority -> u8 SDL_LogSetAllPriority;
	i32 -> SDL_LogPriority -> u8 SDL_LogSetPriority;
	i32 -> SDL_LogPriority SDL_LogGetPriority;
	u8 SDL_LogResetPriorities;
	i32 -> SDL_LogPriority -> (i8)^ -> va_list -> u8 SDL_LogMessageV;
	alias SDL_LogOutputFunction = [u8];
	(SDL_LogOutputFunction)^ -> ((u8)^)^ -> u8 SDL_LogGetOutputFunction;
	SDL_LogOutputFunction -> (u8)^ -> u8 SDL_LogSetOutputFunction;
	type SDL_MessageBoxFlags = enum {INK_ENUM_EXTERN51};
	type SDL_MessageBoxButtonFlags = enum {INK_ENUM_EXTERN52};
	type SDL_MessageBoxButtonData = struct {Uint32 flags;i32 buttonid;(i8)^ text;};
	type SDL_MessageBoxColor = struct {Uint8 r;Uint8 g;Uint8 b;};
	type SDL_MessageBoxColorType = enum {INK_ENUM_EXTERN53};
	type SDL_MessageBoxColorScheme = struct {(SDL_MessageBoxColor)^ colors;};
	type SDL_MessageBoxData = struct {Uint32 flags;(SDL_Window)^ window;(i8)^ title;(i8)^ message;i32 numbuttons;(SDL_MessageBoxButtonData)^ buttons;(SDL_MessageBoxColorScheme)^ colorScheme;};
	(SDL_MessageBoxData)^ -> (i32)^ -> i32 SDL_ShowMessageBox;
	Uint32 -> (i8)^ -> (i8)^ -> (SDL_Window)^ -> i32 SDL_ShowSimpleMessageBox;
	alias SDL_MetalView = (u8)^;
	(SDL_Window)^ -> SDL_MetalView SDL_Metal_CreateView;
	SDL_MetalView -> u8 SDL_Metal_DestroyView;
	SDL_MetalView -> (u8)^ SDL_Metal_GetLayer;
	(SDL_Window)^ -> (i32)^ -> (i32)^ -> u8 SDL_Metal_GetDrawableSize;
	type SDL_PowerState = enum {INK_ENUM_EXTERN54};
	(i32)^ -> (i32)^ -> SDL_PowerState SDL_GetPowerInfo;
	type SDL_RendererFlags = enum {INK_ENUM_EXTERN55};
	type SDL_RendererInfo = struct {u8^ empty;};
	type SDL_Vertex = struct {u8^ empty;};
	type SDL_ScaleMode = enum {INK_ENUM_EXTERN56};
	type SDL_TextureAccess = enum {INK_ENUM_EXTERN57};
	type SDL_TextureModulate = enum {INK_ENUM_EXTERN58};
	type SDL_RendererFlip = enum {INK_ENUM_EXTERN59};
	type SDL_Renderer = struct {u8^ empty;};
	type SDL_Texture = struct {u8^ empty;};
	i32 SDL_GetNumRenderDrivers;
	i32 -> (SDL_RendererInfo)^ -> i32 SDL_GetRenderDriverInfo;
	i32 -> i32 -> Uint32 -> ((SDL_Window)^)^ -> ((SDL_Renderer)^)^ -> i32 SDL_CreateWindowAndRenderer;
	(SDL_Window)^ -> i32 -> Uint32 -> (SDL_Renderer)^ SDL_CreateRenderer;
	(SDL_Surface)^ -> (SDL_Renderer)^ SDL_CreateSoftwareRenderer;
	(SDL_Window)^ -> (SDL_Renderer)^ SDL_GetRenderer;
	(SDL_Renderer)^ -> (SDL_Window)^ SDL_RenderGetWindow;
	(SDL_Renderer)^ -> (SDL_RendererInfo)^ -> i32 SDL_GetRendererInfo;
	(SDL_Renderer)^ -> (i32)^ -> (i32)^ -> i32 SDL_GetRendererOutputSize;
	(SDL_Renderer)^ -> Uint32 -> i32 -> i32 -> i32 -> (SDL_Texture)^ SDL_CreateTexture;
	(SDL_Renderer)^ -> (SDL_Surface)^ -> (SDL_Texture)^ SDL_CreateTextureFromSurface;
	(SDL_Texture)^ -> (Uint32)^ -> (i32)^ -> (i32)^ -> (i32)^ -> i32 SDL_QueryTexture;
	(SDL_Texture)^ -> Uint8 -> Uint8 -> Uint8 -> i32 SDL_SetTextureColorMod;
	(SDL_Texture)^ -> (Uint8)^ -> (Uint8)^ -> (Uint8)^ -> i32 SDL_GetTextureColorMod;
	(SDL_Texture)^ -> Uint8 -> i32 SDL_SetTextureAlphaMod;
	(SDL_Texture)^ -> (Uint8)^ -> i32 SDL_GetTextureAlphaMod;
	(SDL_Texture)^ -> SDL_BlendMode -> i32 SDL_SetTextureBlendMode;
	(SDL_Texture)^ -> (SDL_BlendMode)^ -> i32 SDL_GetTextureBlendMode;
	(SDL_Texture)^ -> SDL_ScaleMode -> i32 SDL_SetTextureScaleMode;
	(SDL_Texture)^ -> (SDL_ScaleMode)^ -> i32 SDL_GetTextureScaleMode;
	(SDL_Texture)^ -> (u8)^ -> i32 SDL_SetTextureUserData;
	(SDL_Texture)^ -> (u8)^ SDL_GetTextureUserData;
	(SDL_Texture)^ -> (SDL_Rect)^ -> (u8)^ -> i32 -> i32 SDL_UpdateTexture;
	(SDL_Texture)^ -> (SDL_Rect)^ -> (Uint8)^ -> i32 -> (Uint8)^ -> i32 -> (Uint8)^ -> i32 -> i32 SDL_UpdateYUVTexture;
	(SDL_Texture)^ -> (SDL_Rect)^ -> (Uint8)^ -> i32 -> (Uint8)^ -> i32 -> i32 SDL_UpdateNVTexture;
	(SDL_Texture)^ -> (SDL_Rect)^ -> ((u8)^)^ -> (i32)^ -> i32 SDL_LockTexture;
	(SDL_Texture)^ -> (SDL_Rect)^ -> ((SDL_Surface)^)^ -> i32 SDL_LockTextureToSurface;
	(SDL_Texture)^ -> u8 SDL_UnlockTexture;
	(SDL_Renderer)^ -> SDL_bool SDL_RenderTargetSupported;
	(SDL_Renderer)^ -> (SDL_Texture)^ -> i32 SDL_SetRenderTarget;
	(SDL_Renderer)^ -> (SDL_Texture)^ SDL_GetRenderTarget;
	(SDL_Renderer)^ -> i32 -> i32 -> i32 SDL_RenderSetLogicalSize;
	(SDL_Renderer)^ -> (i32)^ -> (i32)^ -> u8 SDL_RenderGetLogicalSize;
	(SDL_Renderer)^ -> SDL_bool -> i32 SDL_RenderSetIntegerScale;
	(SDL_Renderer)^ -> SDL_bool SDL_RenderGetIntegerScale;
	(SDL_Renderer)^ -> (SDL_Rect)^ -> i32 SDL_RenderSetViewport;
	(SDL_Renderer)^ -> (SDL_Rect)^ -> u8 SDL_RenderGetViewport;
	(SDL_Renderer)^ -> (SDL_Rect)^ -> i32 SDL_RenderSetClipRect;
	(SDL_Renderer)^ -> (SDL_Rect)^ -> u8 SDL_RenderGetClipRect;
	(SDL_Renderer)^ -> SDL_bool SDL_RenderIsClipEnabled;
	(SDL_Renderer)^ -> f32 -> f32 -> i32 SDL_RenderSetScale;
	(SDL_Renderer)^ -> (f32)^ -> (f32)^ -> u8 SDL_RenderGetScale;
	(SDL_Renderer)^ -> i32 -> i32 -> (f32)^ -> (f32)^ -> u8 SDL_RenderWindowToLogical;
	(SDL_Renderer)^ -> f32 -> f32 -> (i32)^ -> (i32)^ -> u8 SDL_RenderLogicalToWindow;
	(SDL_Renderer)^ -> Uint8 -> Uint8 -> Uint8 -> Uint8 -> i32 SDL_SetRenderDrawColor;
	(SDL_Renderer)^ -> (Uint8)^ -> (Uint8)^ -> (Uint8)^ -> (Uint8)^ -> i32 SDL_GetRenderDrawColor;
	(SDL_Renderer)^ -> SDL_BlendMode -> i32 SDL_SetRenderDrawBlendMode;
	(SDL_Renderer)^ -> (SDL_BlendMode)^ -> i32 SDL_GetRenderDrawBlendMode;
	(SDL_Renderer)^ -> i32 SDL_RenderClear;
	(SDL_Renderer)^ -> i32 -> i32 -> i32 SDL_RenderDrawPoint;
	(SDL_Renderer)^ -> (SDL_Point)^ -> i32 -> i32 SDL_RenderDrawPoints;
	(SDL_Renderer)^ -> i32 -> i32 -> i32 -> i32 -> i32 SDL_RenderDrawLine;
	(SDL_Renderer)^ -> (SDL_Point)^ -> i32 -> i32 SDL_RenderDrawLines;
	(SDL_Renderer)^ -> (SDL_Rect)^ -> i32 SDL_RenderDrawRect;
	(SDL_Renderer)^ -> (SDL_Rect)^ -> i32 -> i32 SDL_RenderDrawRects;
	(SDL_Renderer)^ -> (SDL_Rect)^ -> i32 SDL_RenderFillRect;
	(SDL_Renderer)^ -> (SDL_Rect)^ -> i32 -> i32 SDL_RenderFillRects;
	(SDL_Renderer)^ -> (SDL_Texture)^ -> (SDL_Rect)^ -> (SDL_Rect)^ -> i32 SDL_RenderCopy;
	(SDL_Renderer)^ -> (SDL_Texture)^ -> (SDL_Rect)^ -> (SDL_Rect)^ -> f64 -> (SDL_Point)^ -> SDL_RendererFlip -> i32 SDL_RenderCopyEx;
	(SDL_Renderer)^ -> f32 -> f32 -> i32 SDL_RenderDrawPointF;
	(SDL_Renderer)^ -> (SDL_FPoint)^ -> i32 -> i32 SDL_RenderDrawPointsF;
	(SDL_Renderer)^ -> f32 -> f32 -> f32 -> f32 -> i32 SDL_RenderDrawLineF;
	(SDL_Renderer)^ -> (SDL_FPoint)^ -> i32 -> i32 SDL_RenderDrawLinesF;
	(SDL_Renderer)^ -> (SDL_FRect)^ -> i32 SDL_RenderDrawRectF;
	(SDL_Renderer)^ -> (SDL_FRect)^ -> i32 -> i32 SDL_RenderDrawRectsF;
	(SDL_Renderer)^ -> (SDL_FRect)^ -> i32 SDL_RenderFillRectF;
	(SDL_Renderer)^ -> (SDL_FRect)^ -> i32 -> i32 SDL_RenderFillRectsF;
	(SDL_Renderer)^ -> (SDL_Texture)^ -> (SDL_Rect)^ -> (SDL_FRect)^ -> i32 SDL_RenderCopyF;
	(SDL_Renderer)^ -> (SDL_Texture)^ -> (SDL_Rect)^ -> (SDL_FRect)^ -> f64 -> (SDL_FPoint)^ -> SDL_RendererFlip -> i32 SDL_RenderCopyExF;
	(SDL_Renderer)^ -> (SDL_Texture)^ -> (SDL_Vertex)^ -> i32 -> (i32)^ -> i32 -> i32 SDL_RenderGeometry;
	(SDL_Renderer)^ -> (SDL_Texture)^ -> (f32)^ -> i32 -> (SDL_Color)^ -> i32 -> (f32)^ -> i32 -> i32 -> (u8)^ -> i32 -> i32 -> i32 SDL_RenderGeometryRaw;
	(SDL_Renderer)^ -> (SDL_Rect)^ -> Uint32 -> (u8)^ -> i32 -> i32 SDL_RenderReadPixels;
	(SDL_Renderer)^ -> u8 SDL_RenderPresent;
	(SDL_Texture)^ -> u8 SDL_DestroyTexture;
	(SDL_Renderer)^ -> u8 SDL_DestroyRenderer;
	(SDL_Renderer)^ -> i32 SDL_RenderFlush;
	(SDL_Texture)^ -> (f32)^ -> (f32)^ -> i32 SDL_GL_BindTexture;
	(SDL_Texture)^ -> i32 SDL_GL_UnbindTexture;
	(SDL_Renderer)^ -> (u8)^ SDL_RenderGetMetalLayer;
	(SDL_Renderer)^ -> (u8)^ SDL_RenderGetMetalCommandEncoder;
	(SDL_Renderer)^ -> i32 -> i32 SDL_RenderSetVSync;
	(i8)^ -> u32 -> u32 -> u32 -> u32 -> Uint32 -> (SDL_Window)^ SDL_CreateShapedWindow;
	(SDL_Window)^ -> SDL_bool SDL_IsShapedWindow;
	type WindowShapeMode = enum {INK_ENUM_EXTERN60};
	type SDL_WindowShapeParams = union {Uint8 binarizationCutoff;SDL_Color colorKey;};
	type SDL_WindowShapeMode = struct {u8^ empty;};
	(SDL_Window)^ -> (SDL_Surface)^ -> (SDL_WindowShapeMode)^ -> i32 SDL_SetWindowShape;
	(SDL_Window)^ -> (SDL_WindowShapeMode)^ -> i32 SDL_GetShapedWindowMode;
	Sint64 -> i32 -> i32 SDL_LinuxSetThreadPriority;
	Sint64 -> i32 -> i32 -> i32 SDL_LinuxSetThreadPriorityAndPolicy;
	SDL_bool SDL_IsTablet;
	u8 SDL_OnApplicationWillTerminate;
	u8 SDL_OnApplicationDidReceiveMemoryWarning;
	u8 SDL_OnApplicationWillResignActive;
	u8 SDL_OnApplicationDidEnterBackground;
	u8 SDL_OnApplicationWillEnterForeground;
	u8 SDL_OnApplicationDidBecomeActive;
	Uint32 SDL_GetTicks;
	Uint64 SDL_GetTicks64;
	Uint64 SDL_GetPerformanceCounter;
	Uint64 SDL_GetPerformanceFrequency;
	Uint32 -> u8 SDL_Delay;
	alias SDL_TimerCallback = [u8];
	alias SDL_TimerID = i32;
	Uint32 -> SDL_TimerCallback -> (u8)^ -> SDL_TimerID SDL_AddTimer;
	SDL_TimerID -> SDL_bool SDL_RemoveTimer;
	type SDL_version = struct {u8^ empty;};
	(SDL_version)^ -> u8 SDL_GetVersion;
	(i8)^ SDL_GetRevision;
	i32 SDL_GetRevisionNumber;
	type SDL_Locale = struct {u8^ empty;};
	(SDL_Locale)^ SDL_GetPreferredLocales;
	(i8)^ -> i32 SDL_OpenURL;
	Uint32 -> i32 SDL_Init;
	Uint32 -> i32 SDL_InitSubSystem;
	Uint32 -> u8 SDL_QuitSubSystem;
	Uint32 -> Uint32 SDL_WasInit;
	u8 SDL_Quit;
}
